
Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000072c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  0800085c  0800085c  0001085c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000860  08000860  00010868  2**0
                  CONTENTS
  4 .ARM          00000000  08000860  08000860  00010868  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000860  08000868  00010868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000860  08000860  00010860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000864  08000864  00010864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000868  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000868  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010868  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002534  00000000  00000000  00010891  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000062e  00000000  00000000  00012dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006c4  00000000  00000000  000133f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000128  00000000  00000000  00013ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f0  00000000  00000000  00013be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001e2d  00000000  00000000  00013cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000013ce  00000000  00000000  00015afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007aa9  00000000  00000000  00016ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001e974  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000390  00000000  00000000  0001e9f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000844 	.word	0x08000844

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000844 	.word	0x08000844

08000170 <clock_init>:
#define SIX 0x02
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//Enable clock GPIOB Bit 3 IOPBEN: IO port B clock enable
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_init>:
void GPIO_init() {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
//	MCAL_GPIO_Init(GPIOA, &PinCfg);

//PB1 (output PUSH pull Mode)
//01: Output mode, max speed 10 MHz.
//CNF 00: General purpose output push-pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 800019e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001a2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001a4:	2304      	movs	r3, #4
 80001a6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4827      	ldr	r0, [pc, #156]	; (8000250 <GPIO_init+0xb8>)
 80001b2:	f000 fa7e 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80001b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ba:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	4821      	ldr	r0, [pc, #132]	; (8000250 <GPIO_init+0xb8>)
 80001ca:	f000 fa72 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80001ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001d2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d4:	2304      	movs	r3, #4
 80001d6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	481b      	ldr	r0, [pc, #108]	; (8000250 <GPIO_init+0xb8>)
 80001e2:	f000 fa66 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80001e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ea:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ec:	2304      	movs	r3, #4
 80001ee:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4815      	ldr	r0, [pc, #84]	; (8000250 <GPIO_init+0xb8>)
 80001fa:	f000 fa5a 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80001fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000202:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000204:	2304      	movs	r3, #4
 8000206:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000208:	2301      	movs	r3, #1
 800020a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	480f      	ldr	r0, [pc, #60]	; (8000250 <GPIO_init+0xb8>)
 8000212:	f000 fa4e 	bl	80006b2 <MCAL_GPIO_Init>

	//============================

	//PA13 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800021a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800021c:	2304      	movs	r3, #4
 800021e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000220:	2301      	movs	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <GPIO_init+0xb8>)
 800022a:	f000 fa42 	bl	80006b2 <MCAL_GPIO_Init>

	//PB13 (output PUSH pull Mode)
	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 800022e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000232:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000234:	2304      	movs	r3, #4
 8000236:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <GPIO_init+0xb8>)
 8000242:	f000 fa36 	bl	80006b2 <MCAL_GPIO_Init>

}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010c00 	.word	0x40010c00

08000254 <main>:
	uint32_t i, j;
	for (i = 0; i < time; i++)
		for (j = 0; j < 255; j++)
			;
}
int main(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0

	clock_init();
 8000258:	f7ff ff8a 	bl	8000170 <clock_init>
	LCD_INIT();
 800025c:	f000 f93c 	bl	80004d8 <LCD_INIT>
	GPIO_init();
 8000260:	f7ff ff9a 	bl	8000198 <GPIO_init>
	while (1)
	{
		LCD_WRITE_STRING("HEY");
 8000264:	4801      	ldr	r0, [pc, #4]	; (800026c <main+0x18>)
 8000266:	f000 f995 	bl	8000594 <LCD_WRITE_STRING>
 800026a:	e7fb      	b.n	8000264 <main+0x10>
 800026c:	0800085c 	.word	0x0800085c

08000270 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000272:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000274:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000278:	480c      	ldr	r0, [pc, #48]	; (80002ac <LoopForever+0x6>)
  ldr r1, =_edata
 800027a:	490d      	ldr	r1, [pc, #52]	; (80002b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <LoopForever+0xe>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000280:	e002      	b.n	8000288 <LoopCopyDataInit>

08000282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000286:	3304      	adds	r3, #4

08000288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800028c:	d3f9      	bcc.n	8000282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000290:	4c0a      	ldr	r4, [pc, #40]	; (80002bc <LoopForever+0x16>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000294:	e001      	b.n	800029a <LoopFillZerobss>

08000296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000298:	3204      	adds	r2, #4

0800029a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800029c:	d3fb      	bcc.n	8000296 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029e:	f000 faad 	bl	80007fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a2:	f7ff ffd7 	bl	8000254 <main>

080002a6 <LoopForever>:

LoopForever:
    b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>
  ldr   r0, =_estack
 80002a8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b4:	08000868 	.word	0x08000868
  ldr r2, =_sbss
 80002b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002bc:	20000020 	.word	0x20000020

080002c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC1_2_IRQHandler>

080002c2 <delay_ms>:
 *  Author: Marco
 */

#include "lcd.h"

void delay_ms(uint32_t time) {
 80002c2:	b480      	push	{r7}
 80002c4:	b085      	sub	sp, #20
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	e00b      	b.n	80002e8 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 80002d0:	2300      	movs	r3, #0
 80002d2:	60bb      	str	r3, [r7, #8]
 80002d4:	e002      	b.n	80002dc <delay_ms+0x1a>
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	3301      	adds	r3, #1
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	2bfe      	cmp	r3, #254	; 0xfe
 80002e0:	d9f9      	bls.n	80002d6 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	3301      	adds	r3, #1
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d3ef      	bcc.n	80002d0 <delay_ms+0xe>
			;
}
 80002f0:	bf00      	nop
 80002f2:	3714      	adds	r7, #20
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
	...

080002fc <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000300:	4b52      	ldr	r3, [pc, #328]	; (800044c <LCD_GPIO_init+0x150>)
 8000302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000306:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000308:	4b50      	ldr	r3, [pc, #320]	; (800044c <LCD_GPIO_init+0x150>)
 800030a:	2204      	movs	r2, #4
 800030c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800030e:	4b4f      	ldr	r3, [pc, #316]	; (800044c <LCD_GPIO_init+0x150>)
 8000310:	2201      	movs	r2, #1
 8000312:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000314:	494d      	ldr	r1, [pc, #308]	; (800044c <LCD_GPIO_init+0x150>)
 8000316:	484e      	ldr	r0, [pc, #312]	; (8000450 <LCD_GPIO_init+0x154>)
 8000318:	f000 f9cb 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 800031c:	4b4b      	ldr	r3, [pc, #300]	; (800044c <LCD_GPIO_init+0x150>)
 800031e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000322:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000324:	4b49      	ldr	r3, [pc, #292]	; (800044c <LCD_GPIO_init+0x150>)
 8000326:	2204      	movs	r2, #4
 8000328:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800032a:	4b48      	ldr	r3, [pc, #288]	; (800044c <LCD_GPIO_init+0x150>)
 800032c:	2201      	movs	r2, #1
 800032e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000330:	4946      	ldr	r1, [pc, #280]	; (800044c <LCD_GPIO_init+0x150>)
 8000332:	4847      	ldr	r0, [pc, #284]	; (8000450 <LCD_GPIO_init+0x154>)
 8000334:	f000 f9bd 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 8000338:	4b44      	ldr	r3, [pc, #272]	; (800044c <LCD_GPIO_init+0x150>)
 800033a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800033e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000340:	4b42      	ldr	r3, [pc, #264]	; (800044c <LCD_GPIO_init+0x150>)
 8000342:	2204      	movs	r2, #4
 8000344:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000346:	4b41      	ldr	r3, [pc, #260]	; (800044c <LCD_GPIO_init+0x150>)
 8000348:	2201      	movs	r2, #1
 800034a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800034c:	493f      	ldr	r1, [pc, #252]	; (800044c <LCD_GPIO_init+0x150>)
 800034e:	4840      	ldr	r0, [pc, #256]	; (8000450 <LCD_GPIO_init+0x154>)
 8000350:	f000 f9af 	bl	80006b2 <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000354:	4b3d      	ldr	r3, [pc, #244]	; (800044c <LCD_GPIO_init+0x150>)
 8000356:	2201      	movs	r2, #1
 8000358:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800035a:	4b3c      	ldr	r3, [pc, #240]	; (800044c <LCD_GPIO_init+0x150>)
 800035c:	2204      	movs	r2, #4
 800035e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000360:	4b3a      	ldr	r3, [pc, #232]	; (800044c <LCD_GPIO_init+0x150>)
 8000362:	2201      	movs	r2, #1
 8000364:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000366:	4939      	ldr	r1, [pc, #228]	; (800044c <LCD_GPIO_init+0x150>)
 8000368:	4839      	ldr	r0, [pc, #228]	; (8000450 <LCD_GPIO_init+0x154>)
 800036a:	f000 f9a2 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800036e:	4b37      	ldr	r3, [pc, #220]	; (800044c <LCD_GPIO_init+0x150>)
 8000370:	2202      	movs	r2, #2
 8000372:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000374:	4b35      	ldr	r3, [pc, #212]	; (800044c <LCD_GPIO_init+0x150>)
 8000376:	2204      	movs	r2, #4
 8000378:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800037a:	4b34      	ldr	r3, [pc, #208]	; (800044c <LCD_GPIO_init+0x150>)
 800037c:	2201      	movs	r2, #1
 800037e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000380:	4932      	ldr	r1, [pc, #200]	; (800044c <LCD_GPIO_init+0x150>)
 8000382:	4833      	ldr	r0, [pc, #204]	; (8000450 <LCD_GPIO_init+0x154>)
 8000384:	f000 f995 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000388:	4b30      	ldr	r3, [pc, #192]	; (800044c <LCD_GPIO_init+0x150>)
 800038a:	2204      	movs	r2, #4
 800038c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800038e:	4b2f      	ldr	r3, [pc, #188]	; (800044c <LCD_GPIO_init+0x150>)
 8000390:	2204      	movs	r2, #4
 8000392:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000394:	4b2d      	ldr	r3, [pc, #180]	; (800044c <LCD_GPIO_init+0x150>)
 8000396:	2201      	movs	r2, #1
 8000398:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800039a:	492c      	ldr	r1, [pc, #176]	; (800044c <LCD_GPIO_init+0x150>)
 800039c:	482c      	ldr	r0, [pc, #176]	; (8000450 <LCD_GPIO_init+0x154>)
 800039e:	f000 f988 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80003a2:	4b2a      	ldr	r3, [pc, #168]	; (800044c <LCD_GPIO_init+0x150>)
 80003a4:	2208      	movs	r2, #8
 80003a6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003a8:	4b28      	ldr	r3, [pc, #160]	; (800044c <LCD_GPIO_init+0x150>)
 80003aa:	2204      	movs	r2, #4
 80003ac:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003ae:	4b27      	ldr	r3, [pc, #156]	; (800044c <LCD_GPIO_init+0x150>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003b4:	4925      	ldr	r1, [pc, #148]	; (800044c <LCD_GPIO_init+0x150>)
 80003b6:	4826      	ldr	r0, [pc, #152]	; (8000450 <LCD_GPIO_init+0x154>)
 80003b8:	f000 f97b 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80003bc:	4b23      	ldr	r3, [pc, #140]	; (800044c <LCD_GPIO_init+0x150>)
 80003be:	2210      	movs	r2, #16
 80003c0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003c2:	4b22      	ldr	r3, [pc, #136]	; (800044c <LCD_GPIO_init+0x150>)
 80003c4:	2204      	movs	r2, #4
 80003c6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003c8:	4b20      	ldr	r3, [pc, #128]	; (800044c <LCD_GPIO_init+0x150>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003ce:	491f      	ldr	r1, [pc, #124]	; (800044c <LCD_GPIO_init+0x150>)
 80003d0:	481f      	ldr	r0, [pc, #124]	; (8000450 <LCD_GPIO_init+0x154>)
 80003d2:	f000 f96e 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80003d6:	4b1d      	ldr	r3, [pc, #116]	; (800044c <LCD_GPIO_init+0x150>)
 80003d8:	2220      	movs	r2, #32
 80003da:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	; (800044c <LCD_GPIO_init+0x150>)
 80003de:	2204      	movs	r2, #4
 80003e0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <LCD_GPIO_init+0x150>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003e8:	4918      	ldr	r1, [pc, #96]	; (800044c <LCD_GPIO_init+0x150>)
 80003ea:	4819      	ldr	r0, [pc, #100]	; (8000450 <LCD_GPIO_init+0x154>)
 80003ec:	f000 f961 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80003f0:	4b16      	ldr	r3, [pc, #88]	; (800044c <LCD_GPIO_init+0x150>)
 80003f2:	2240      	movs	r2, #64	; 0x40
 80003f4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <LCD_GPIO_init+0x150>)
 80003f8:	2204      	movs	r2, #4
 80003fa:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <LCD_GPIO_init+0x150>)
 80003fe:	2201      	movs	r2, #1
 8000400:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000402:	4912      	ldr	r1, [pc, #72]	; (800044c <LCD_GPIO_init+0x150>)
 8000404:	4812      	ldr	r0, [pc, #72]	; (8000450 <LCD_GPIO_init+0x154>)
 8000406:	f000 f954 	bl	80006b2 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <LCD_GPIO_init+0x150>)
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <LCD_GPIO_init+0x150>)
 8000412:	2204      	movs	r2, #4
 8000414:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <LCD_GPIO_init+0x150>)
 8000418:	2201      	movs	r2, #1
 800041a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800041c:	490b      	ldr	r1, [pc, #44]	; (800044c <LCD_GPIO_init+0x150>)
 800041e:	480c      	ldr	r0, [pc, #48]	; (8000450 <LCD_GPIO_init+0x154>)
 8000420:	f000 f947 	bl	80006b2 <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042a:	4809      	ldr	r0, [pc, #36]	; (8000450 <LCD_GPIO_init+0x154>)
 800042c:	f000 f9c0 	bl	80007b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	4806      	ldr	r0, [pc, #24]	; (8000450 <LCD_GPIO_init+0x154>)
 8000438:	f000 f9ba 	bl	80007b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000442:	4803      	ldr	r0, [pc, #12]	; (8000450 <LCD_GPIO_init+0x154>)
 8000444:	f000 f9b4 	bl	80007b0 <MCAL_GPIO_WritePin>

}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	2000001c 	.word	0x2000001c
 8000450:	40010800 	.word	0x40010800

08000454 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000458:	2001      	movs	r0, #1
 800045a:	f000 f857 	bl	800050c <LCD_WRITE_COMMAND>
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046e:	4807      	ldr	r0, [pc, #28]	; (800048c <LCD_lcd_kick+0x28>)
 8000470:	f000 f99e 	bl	80007b0 <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000474:	2032      	movs	r0, #50	; 0x32
 8000476:	f7ff ff24 	bl	80002c2 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000480:	4802      	ldr	r0, [pc, #8]	; (800048c <LCD_lcd_kick+0x28>)
 8000482:	f000 f995 	bl	80007b0 <MCAL_GPIO_WritePin>
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40010800 	.word	0x40010800

08000490 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	460a      	mov	r2, r1
 800049a:	71fb      	strb	r3, [r7, #7]
 800049c:	4613      	mov	r3, r2
 800049e:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d108      	bne.n	80004b8 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 80004a6:	79bb      	ldrb	r3, [r7, #6]
 80004a8:	2b0f      	cmp	r3, #15
 80004aa:	d805      	bhi.n	80004b8 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 80004ac:	79bb      	ldrb	r3, [r7, #6]
 80004ae:	3b80      	subs	r3, #128	; 0x80
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f82a 	bl	800050c <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d108      	bne.n	80004d0 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 80004be:	79bb      	ldrb	r3, [r7, #6]
 80004c0:	2b0f      	cmp	r3, #15
 80004c2:	d805      	bhi.n	80004d0 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 80004c4:	79bb      	ldrb	r3, [r7, #6]
 80004c6:	3b40      	subs	r3, #64	; 0x40
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 f81e 	bl	800050c <LCD_WRITE_COMMAND>
		}
	}
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LCD_INIT>:

void LCD_INIT() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0

	delay_ms(20);
 80004dc:	2014      	movs	r0, #20
 80004de:	f7ff fef0 	bl	80002c2 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 80004e2:	f7ff ff0b 	bl	80002fc <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 80004e6:	200f      	movs	r0, #15
 80004e8:	f7ff feeb 	bl	80002c2 <delay_ms>

	LCD_clear_screen();
 80004ec:	f7ff ffb2 	bl	8000454 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80004f0:	2038      	movs	r0, #56	; 0x38
 80004f2:	f000 f80b 	bl	800050c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80004f6:	2006      	movs	r0, #6
 80004f8:	f000 f808 	bl	800050c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80004fc:	2080      	movs	r0, #128	; 0x80
 80004fe:	f000 f805 	bl	800050c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000502:	200f      	movs	r0, #15
 8000504:	f000 f802 	bl	800050c <LCD_WRITE_COMMAND>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	b29b      	uxth	r3, r3
 800051a:	4619      	mov	r1, r3
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <LCD_WRITE_COMMAND+0x40>)
 800051e:	f000 f95e 	bl	80007de <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000528:	4808      	ldr	r0, [pc, #32]	; (800054c <LCD_WRITE_COMMAND+0x40>)
 800052a:	f000 f941 	bl	80007b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000534:	4805      	ldr	r0, [pc, #20]	; (800054c <LCD_WRITE_COMMAND+0x40>)
 8000536:	f000 f93b 	bl	80007b0 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 800053a:	2001      	movs	r0, #1
 800053c:	f7ff fec1 	bl	80002c2 <delay_ms>
	LCD_lcd_kick();
 8000540:	f7ff ff90 	bl	8000464 <LCD_lcd_kick>

}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40010800 	.word	0x40010800

08000550 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	b29b      	uxth	r3, r3
 800055e:	4619      	mov	r1, r3
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <LCD_WRITE_CHAR+0x40>)
 8000562:	f000 f93c 	bl	80007de <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056c:	4808      	ldr	r0, [pc, #32]	; (8000590 <LCD_WRITE_CHAR+0x40>)
 800056e:	f000 f91f 	bl	80007b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <LCD_WRITE_CHAR+0x40>)
 800057a:	f000 f919 	bl	80007b0 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 800057e:	2001      	movs	r0, #1
 8000580:	f7ff fe9f 	bl	80002c2 <delay_ms>
	LCD_lcd_kick();
 8000584:	f7ff ff6e 	bl	8000464 <LCD_lcd_kick>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40010800 	.word	0x40010800

08000594 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	int count = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 80005a0:	e01c      	b.n	80005dc <LCD_WRITE_STRING+0x48>
		count++;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	3301      	adds	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	1c5a      	adds	r2, r3, #1
 80005ac:	607a      	str	r2, [r7, #4]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ffcd 	bl	8000550 <LCD_WRITE_CHAR>
		if (count == 16) {
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b10      	cmp	r3, #16
 80005ba:	d104      	bne.n	80005c6 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 80005bc:	2100      	movs	r1, #0
 80005be:	2002      	movs	r0, #2
 80005c0:	f7ff ff66 	bl	8000490 <LCD_GOTO_XY>
 80005c4:	e00a      	b.n	80005dc <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	2b20      	cmp	r3, #32
 80005ca:	d107      	bne.n	80005dc <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 80005cc:	f7ff ff42 	bl	8000454 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 80005d0:	2100      	movs	r1, #0
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff ff5c 	bl	8000490 <LCD_GOTO_XY>
			count = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1de      	bne.n	80005a2 <LCD_WRITE_STRING+0xe>
		}
	}
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <Get_CRLH_Position>:

#include "Stm32_F103C6_gpio_driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	2b80      	cmp	r3, #128	; 0x80
 80005fa:	d042      	beq.n	8000682 <Get_CRLH_Position+0x96>
 80005fc:	2b80      	cmp	r3, #128	; 0x80
 80005fe:	dc11      	bgt.n	8000624 <Get_CRLH_Position+0x38>
 8000600:	2b08      	cmp	r3, #8
 8000602:	d036      	beq.n	8000672 <Get_CRLH_Position+0x86>
 8000604:	2b08      	cmp	r3, #8
 8000606:	dc06      	bgt.n	8000616 <Get_CRLH_Position+0x2a>
 8000608:	2b02      	cmp	r3, #2
 800060a:	d02e      	beq.n	800066a <Get_CRLH_Position+0x7e>
 800060c:	2b04      	cmp	r3, #4
 800060e:	d02e      	beq.n	800066e <Get_CRLH_Position+0x82>
 8000610:	2b01      	cmp	r3, #1
 8000612:	d028      	beq.n	8000666 <Get_CRLH_Position+0x7a>
 8000614:	e047      	b.n	80006a6 <Get_CRLH_Position+0xba>
 8000616:	2b20      	cmp	r3, #32
 8000618:	d02f      	beq.n	800067a <Get_CRLH_Position+0x8e>
 800061a:	2b40      	cmp	r3, #64	; 0x40
 800061c:	d02f      	beq.n	800067e <Get_CRLH_Position+0x92>
 800061e:	2b10      	cmp	r3, #16
 8000620:	d029      	beq.n	8000676 <Get_CRLH_Position+0x8a>
 8000622:	e040      	b.n	80006a6 <Get_CRLH_Position+0xba>
 8000624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000628:	d033      	beq.n	8000692 <Get_CRLH_Position+0xa6>
 800062a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800062e:	dc09      	bgt.n	8000644 <Get_CRLH_Position+0x58>
 8000630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000634:	d029      	beq.n	800068a <Get_CRLH_Position+0x9e>
 8000636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800063a:	d028      	beq.n	800068e <Get_CRLH_Position+0xa2>
 800063c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000640:	d021      	beq.n	8000686 <Get_CRLH_Position+0x9a>
 8000642:	e030      	b.n	80006a6 <Get_CRLH_Position+0xba>
 8000644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000648:	d027      	beq.n	800069a <Get_CRLH_Position+0xae>
 800064a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800064e:	dc03      	bgt.n	8000658 <Get_CRLH_Position+0x6c>
 8000650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000654:	d01f      	beq.n	8000696 <Get_CRLH_Position+0xaa>
 8000656:	e026      	b.n	80006a6 <Get_CRLH_Position+0xba>
 8000658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800065c:	d01f      	beq.n	800069e <Get_CRLH_Position+0xb2>
 800065e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000662:	d01e      	beq.n	80006a2 <Get_CRLH_Position+0xb6>
 8000664:	e01f      	b.n	80006a6 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 8000666:	2300      	movs	r3, #0
 8000668:	e01e      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 800066a:	2304      	movs	r3, #4
 800066c:	e01c      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 800066e:	2308      	movs	r3, #8
 8000670:	e01a      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 8000672:	230c      	movs	r3, #12
 8000674:	e018      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 8000676:	2310      	movs	r3, #16
 8000678:	e016      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 800067a:	2314      	movs	r3, #20
 800067c:	e014      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 800067e:	2318      	movs	r3, #24
 8000680:	e012      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 8000682:	231c      	movs	r3, #28
 8000684:	e010      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 8000686:	2300      	movs	r3, #0
 8000688:	e00e      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 800068a:	2304      	movs	r3, #4
 800068c:	e00c      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 800068e:	2308      	movs	r3, #8
 8000690:	e00a      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000692:	230c      	movs	r3, #12
 8000694:	e008      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 8000696:	2310      	movs	r3, #16
 8000698:	e006      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 800069a:	2314      	movs	r3, #20
 800069c:	e004      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 800069e:	2318      	movs	r3, #24
 80006a0:	e002      	b.n	80006a8 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 80006a2:	231c      	movs	r3, #28
 80006a4:	e000      	b.n	80006a8 <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 80006b2:	b590      	push	{r4, r7, lr}
 80006b4:	b085      	sub	sp, #20
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )?  &GPIOx->CRL : &GPIOx->CRH ;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	2bff      	cmp	r3, #255	; 0xff
 80006ca:	d801      	bhi.n	80006d0 <MCAL_GPIO_Init+0x1e>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	e001      	b.n	80006d4 <MCAL_GPIO_Init+0x22>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3304      	adds	r3, #4
 80006d4:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff86 	bl	80005ec <Get_CRLH_Position>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	230f      	movs	r3, #15
 80006e6:	4093      	lsls	r3, r2
 80006e8:	43da      	mvns	r2, r3
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	401a      	ands	r2, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if (  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	789b      	ldrb	r3, [r3, #2]
 80006f8:	2b07      	cmp	r3, #7
 80006fa:	d00b      	beq.n	8000714 <MCAL_GPIO_Init+0x62>
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	789b      	ldrb	r3, [r3, #2]
 8000700:	2b06      	cmp	r3, #6
 8000702:	d007      	beq.n	8000714 <MCAL_GPIO_Init+0x62>
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	2b05      	cmp	r3, #5
 800070a:	d003      	beq.n	8000714 <MCAL_GPIO_Init+0x62>
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	789b      	ldrb	r3, [r3, #2]
 8000710:	2b04      	cmp	r3, #4
 8000712:	d10e      	bne.n	8000732 <MCAL_GPIO_Init+0x80>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f ) ;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	789b      	ldrb	r3, [r3, #2]
 8000718:	3b04      	subs	r3, #4
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	b25a      	sxtb	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	78db      	ldrb	r3, [r3, #3]
 8000722:	b25b      	sxtb	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b25b      	sxtb	r3, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	73fb      	strb	r3, [r7, #15]
 8000730:	e02c      	b.n	800078c <MCAL_GPIO_Init+0xda>

	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) ||  (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	789b      	ldrb	r3, [r3, #2]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d003      	beq.n	8000742 <MCAL_GPIO_Init+0x90>
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	789b      	ldrb	r3, [r3, #2]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d107      	bne.n	8000752 <MCAL_GPIO_Init+0xa0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE  ) << 2) | 0x0) & 0x0f ) ;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	789b      	ldrb	r3, [r3, #2]
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	73fb      	strb	r3, [r7, #15]
 8000750:	e01c      	b.n	800078c <MCAL_GPIO_Init+0xda>

		}else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	789b      	ldrb	r3, [r3, #2]
 8000756:	2b08      	cmp	r3, #8
 8000758:	d102      	bne.n	8000760 <MCAL_GPIO_Init+0xae>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO  ) << 2) | 0x0) & 0x0f ) ;
 800075a:	2304      	movs	r3, #4
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e015      	b.n	800078c <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU  ) << 2) | 0x0) & 0x0f ) ;
 8000760:	2308      	movs	r3, #8
 8000762:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	789b      	ldrb	r3, [r3, #2]
 8000768:	2b02      	cmp	r3, #2
 800076a:	d107      	bne.n	800077c <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	8812      	ldrh	r2, [r2, #0]
 8000774:	431a      	orrs	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	e007      	b.n	800078c <MCAL_GPIO_Init+0xda>

			}else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	683a      	ldr	r2, [r7, #0]
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	43d2      	mvns	r2, r2
 8000786:	401a      	ands	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	60da      	str	r2, [r3, #12]

		}

	}
// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)   );
 800078c:	7bfc      	ldrb	r4, [r7, #15]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff2a 	bl	80005ec <Get_CRLH_Position>
 8000798:	4603      	mov	r3, r0
 800079a:	fa04 f203 	lsl.w	r2, r4, r3
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	431a      	orrs	r2, r3
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	601a      	str	r2, [r3, #0]

}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd90      	pop	{r4, r7, pc}

080007b0 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx,uint16_t PinNumber , uint8_t Value)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	460b      	mov	r3, r1
 80007ba:	807b      	strh	r3, [r7, #2]
 80007bc:	4613      	mov	r3, r2
 80007be:	707b      	strb	r3, [r7, #1]
	if ( Value !=  GPIO_PIN_RESET )
 80007c0:	787b      	ldrb	r3, [r7, #1]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d003      	beq.n	80007ce <MCAL_GPIO_WritePin+0x1e>
//		or
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber ;
 80007c6:	887a      	ldrh	r2, [r7, #2]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	611a      	str	r2, [r3, #16]
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber ;
	}

}
 80007cc:	e002      	b.n	80007d4 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 80007ce:	887a      	ldrh	r2, [r7, #2]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	615a      	str	r2, [r3, #20]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <MCAL_GPIO_WritePort>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIOx , uint16_t Value)
{
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	460b      	mov	r3, r1
 80007e8:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value ;
 80007ea:	887a      	ldrh	r2, [r7, #2]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60da      	str	r2, [r3, #12]
}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
	...

080007fc <__libc_init_array>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	2500      	movs	r5, #0
 8000800:	4e0c      	ldr	r6, [pc, #48]	; (8000834 <__libc_init_array+0x38>)
 8000802:	4c0d      	ldr	r4, [pc, #52]	; (8000838 <__libc_init_array+0x3c>)
 8000804:	1ba4      	subs	r4, r4, r6
 8000806:	10a4      	asrs	r4, r4, #2
 8000808:	42a5      	cmp	r5, r4
 800080a:	d109      	bne.n	8000820 <__libc_init_array+0x24>
 800080c:	f000 f81a 	bl	8000844 <_init>
 8000810:	2500      	movs	r5, #0
 8000812:	4e0a      	ldr	r6, [pc, #40]	; (800083c <__libc_init_array+0x40>)
 8000814:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <__libc_init_array+0x44>)
 8000816:	1ba4      	subs	r4, r4, r6
 8000818:	10a4      	asrs	r4, r4, #2
 800081a:	42a5      	cmp	r5, r4
 800081c:	d105      	bne.n	800082a <__libc_init_array+0x2e>
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000824:	4798      	blx	r3
 8000826:	3501      	adds	r5, #1
 8000828:	e7ee      	b.n	8000808 <__libc_init_array+0xc>
 800082a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800082e:	4798      	blx	r3
 8000830:	3501      	adds	r5, #1
 8000832:	e7f2      	b.n	800081a <__libc_init_array+0x1e>
 8000834:	08000860 	.word	0x08000860
 8000838:	08000860 	.word	0x08000860
 800083c:	08000860 	.word	0x08000860
 8000840:	08000864 	.word	0x08000864

08000844 <_init>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	bf00      	nop
 8000848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084a:	bc08      	pop	{r3}
 800084c:	469e      	mov	lr, r3
 800084e:	4770      	bx	lr

08000850 <_fini>:
 8000850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000852:	bf00      	nop
 8000854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000856:	bc08      	pop	{r3}
 8000858:	469e      	mov	lr, r3
 800085a:	4770      	bx	lr
