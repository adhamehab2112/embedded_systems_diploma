
stm32_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dac  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000edc  08000edc  00010edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f04  08000f04  00010f0c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f04  08000f04  00010f0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f04  08000f0c  00010f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f04  08000f04  00010f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f08  08000f08  00010f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000f0c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000f0c  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034b6  00000000  00000000  00010f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000850  00000000  00000000  000143eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a64  00000000  00000000  00014c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b0  00000000  00000000  000156a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  00015850  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000007fd  00000000  00000000  000159b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001d2d  00000000  00000000  000161b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008e57  00000000  00000000  00017ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00020d39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000570  00000000  00000000  00020db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ec4 	.word	0x08000ec4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ec4 	.word	0x08000ec4

08000170 <wait_ms>:
 */
#include"LCD.h"
#include"../../MCAL/GPIO/GPIO.h"

void wait_ms(uint32_t time)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i , j;

	for( i=0 ; i<time ; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <wait_ms+0x26>
		for(j=0 ; j<255 ; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <wait_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <wait_ms+0x14>
	for( i=0 ; i<time ; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <wait_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <Private_LCD_Pins_init>:
void Private_LCD_Pins_init()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	// RS init
	GPIO_Pin_Config_t lcd_config ;
	lcd_config.GPIO_PIN_MODE = GPIO_OUTPUT_PP	;
 80001ae:	2304      	movs	r3, #4
 80001b0:	71bb      	strb	r3, [r7, #6]
	lcd_config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 80001b2:	2301      	movs	r3, #1
 80001b4:	71fb      	strb	r3, [r7, #7]
	lcd_config.GPIO_PIN_NUMBER = LCD_COMM_RS ;
 80001b6:	2308      	movs	r3, #8
 80001b8:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_COMM_PORT, &lcd_config);
 80001ba:	1d3b      	adds	r3, r7, #4
 80001bc:	4619      	mov	r1, r3
 80001be:	4842      	ldr	r0, [pc, #264]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 80001c0:	f000 fd04 	bl	8000bcc <MCAL_GPIO_Init>

	//RW init
	lcd_config.GPIO_PIN_MODE = GPIO_OUTPUT_PP	;
 80001c4:	2304      	movs	r3, #4
 80001c6:	71bb      	strb	r3, [r7, #6]
	lcd_config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 80001c8:	2301      	movs	r3, #1
 80001ca:	71fb      	strb	r3, [r7, #7]
	lcd_config.GPIO_PIN_NUMBER = LCD_COMM_RW ;
 80001cc:	2309      	movs	r3, #9
 80001ce:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_COMM_PORT, &lcd_config);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	483c      	ldr	r0, [pc, #240]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 80001d6:	f000 fcf9 	bl	8000bcc <MCAL_GPIO_Init>
	//EN init
	lcd_config.GPIO_PIN_MODE = GPIO_OUTPUT_PP	;
 80001da:	2304      	movs	r3, #4
 80001dc:	71bb      	strb	r3, [r7, #6]
	lcd_config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 80001de:	2301      	movs	r3, #1
 80001e0:	71fb      	strb	r3, [r7, #7]
	lcd_config.GPIO_PIN_NUMBER = LCD_COMM_EN ;
 80001e2:	230a      	movs	r3, #10
 80001e4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(LCD_COMM_PORT, &lcd_config);
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	4619      	mov	r1, r3
 80001ea:	4837      	ldr	r0, [pc, #220]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 80001ec:	f000 fcee 	bl	8000bcc <MCAL_GPIO_Init>
	lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D7 ;
	MCAL_GPIO_Init(LCD_DATA_PORT, &lcd_config);
#elif(LCD_DATA_BITS_MODE == 8)
	//DATA init
		//D0
		lcd_config.GPIO_PIN_MODE = GPIO_OUTPUT_PP	;
 80001f0:	2304      	movs	r3, #4
 80001f2:	71bb      	strb	r3, [r7, #6]
		lcd_config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 80001f4:	2301      	movs	r3, #1
 80001f6:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D0 ;
 80001f8:	2300      	movs	r3, #0
 80001fa:	80bb      	strh	r3, [r7, #4]
		MCAL_GPIO_Init(LCD_DATA_PORT, &lcd_config);
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	4619      	mov	r1, r3
 8000200:	4831      	ldr	r0, [pc, #196]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 8000202:	f000 fce3 	bl	8000bcc <MCAL_GPIO_Init>
		//D1
		lcd_config.GPIO_PIN_MODE = GPIO_OUTPUT_PP	;
 8000206:	2304      	movs	r3, #4
 8000208:	71bb      	strb	r3, [r7, #6]
		lcd_config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 800020a:	2301      	movs	r3, #1
 800020c:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D1 ;
 800020e:	2301      	movs	r3, #1
 8000210:	80bb      	strh	r3, [r7, #4]
		MCAL_GPIO_Init(LCD_DATA_PORT, &lcd_config);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4619      	mov	r1, r3
 8000216:	482c      	ldr	r0, [pc, #176]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 8000218:	f000 fcd8 	bl	8000bcc <MCAL_GPIO_Init>
		//D2
		lcd_config.GPIO_PIN_MODE = GPIO_OUTPUT_PP	;
 800021c:	2304      	movs	r3, #4
 800021e:	71bb      	strb	r3, [r7, #6]
		lcd_config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 8000220:	2301      	movs	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D2 ;
 8000224:	2302      	movs	r3, #2
 8000226:	80bb      	strh	r3, [r7, #4]
		MCAL_GPIO_Init(LCD_DATA_PORT, &lcd_config);
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	4619      	mov	r1, r3
 800022c:	4826      	ldr	r0, [pc, #152]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 800022e:	f000 fccd 	bl	8000bcc <MCAL_GPIO_Init>
		//D3
		lcd_config.GPIO_PIN_MODE = GPIO_OUTPUT_PP	;
 8000232:	2304      	movs	r3, #4
 8000234:	71bb      	strb	r3, [r7, #6]
		lcd_config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 8000236:	2301      	movs	r3, #1
 8000238:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D3 ;
 800023a:	2303      	movs	r3, #3
 800023c:	80bb      	strh	r3, [r7, #4]
		MCAL_GPIO_Init(LCD_DATA_PORT, &lcd_config);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	4821      	ldr	r0, [pc, #132]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 8000244:	f000 fcc2 	bl	8000bcc <MCAL_GPIO_Init>
		//D4
		lcd_config.GPIO_PIN_MODE = GPIO_OUTPUT_PP	;
 8000248:	2304      	movs	r3, #4
 800024a:	71bb      	strb	r3, [r7, #6]
		lcd_config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 800024c:	2301      	movs	r3, #1
 800024e:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D4 ;
 8000250:	2304      	movs	r3, #4
 8000252:	80bb      	strh	r3, [r7, #4]
		MCAL_GPIO_Init(LCD_DATA_PORT, &lcd_config);
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	4619      	mov	r1, r3
 8000258:	481b      	ldr	r0, [pc, #108]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 800025a:	f000 fcb7 	bl	8000bcc <MCAL_GPIO_Init>
		//D5
		lcd_config.GPIO_PIN_MODE = GPIO_OUTPUT_PP	;
 800025e:	2304      	movs	r3, #4
 8000260:	71bb      	strb	r3, [r7, #6]
		lcd_config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 8000262:	2301      	movs	r3, #1
 8000264:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D5 ;
 8000266:	2305      	movs	r3, #5
 8000268:	80bb      	strh	r3, [r7, #4]
		MCAL_GPIO_Init(LCD_DATA_PORT, &lcd_config);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4619      	mov	r1, r3
 800026e:	4816      	ldr	r0, [pc, #88]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 8000270:	f000 fcac 	bl	8000bcc <MCAL_GPIO_Init>
		//D6
		lcd_config.GPIO_PIN_MODE = GPIO_OUTPUT_PP	;
 8000274:	2304      	movs	r3, #4
 8000276:	71bb      	strb	r3, [r7, #6]
		lcd_config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 8000278:	2301      	movs	r3, #1
 800027a:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D6 ;
 800027c:	2306      	movs	r3, #6
 800027e:	80bb      	strh	r3, [r7, #4]
		MCAL_GPIO_Init(LCD_DATA_PORT, &lcd_config);
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	4619      	mov	r1, r3
 8000284:	4810      	ldr	r0, [pc, #64]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 8000286:	f000 fca1 	bl	8000bcc <MCAL_GPIO_Init>
		//D7
		lcd_config.GPIO_PIN_MODE = GPIO_OUTPUT_PP	;
 800028a:	2304      	movs	r3, #4
 800028c:	71bb      	strb	r3, [r7, #6]
		lcd_config.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ ;
 800028e:	2301      	movs	r3, #1
 8000290:	71fb      	strb	r3, [r7, #7]
		lcd_config.GPIO_PIN_NUMBER = LCD_DATA_D7 ;
 8000292:	2307      	movs	r3, #7
 8000294:	80bb      	strh	r3, [r7, #4]
		MCAL_GPIO_Init(LCD_DATA_PORT, &lcd_config);
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	4619      	mov	r1, r3
 800029a:	480b      	ldr	r0, [pc, #44]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 800029c:	f000 fc96 	bl	8000bcc <MCAL_GPIO_Init>

#endif
	MCAL_GPIO_Pin_Write(LCD_COMM_PORT, LCD_COMM_EN, GPIO_PIN_LOW);
 80002a0:	2200      	movs	r2, #0
 80002a2:	210a      	movs	r1, #10
 80002a4:	4808      	ldr	r0, [pc, #32]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 80002a6:	f000 fd16 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_COMM_PORT, LCD_COMM_RS, GPIO_PIN_LOW);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2108      	movs	r1, #8
 80002ae:	4806      	ldr	r0, [pc, #24]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 80002b0:	f000 fd11 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_COMM_PORT, LCD_COMM_RW, GPIO_PIN_LOW);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2109      	movs	r1, #9
 80002b8:	4803      	ldr	r0, [pc, #12]	; (80002c8 <Private_LCD_Pins_init+0x120>)
 80002ba:	f000 fd0c 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010800 	.word	0x40010800

080002cc <Private_LCD_Kick>:
void Private_LCD_Kick()
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	MCAL_GPIO_Pin_Write(LCD_COMM_PORT, LCD_COMM_EN, GPIO_PIN_HIGH);
 80002d0:	2201      	movs	r2, #1
 80002d2:	210a      	movs	r1, #10
 80002d4:	4806      	ldr	r0, [pc, #24]	; (80002f0 <Private_LCD_Kick+0x24>)
 80002d6:	f000 fcfe 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	wait_ms(50);
 80002da:	2032      	movs	r0, #50	; 0x32
 80002dc:	f7ff ff48 	bl	8000170 <wait_ms>
	MCAL_GPIO_Pin_Write(LCD_COMM_PORT, LCD_COMM_EN, GPIO_PIN_LOW);
 80002e0:	2200      	movs	r2, #0
 80002e2:	210a      	movs	r1, #10
 80002e4:	4802      	ldr	r0, [pc, #8]	; (80002f0 <Private_LCD_Kick+0x24>)
 80002e6:	f000 fcf6 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40010800 	.word	0x40010800

080002f4 <HAL_LCD_Init>:
void HAL_LCD_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	wait_ms(20);
 80002f8:	2014      	movs	r0, #20
 80002fa:	f7ff ff39 	bl	8000170 <wait_ms>
	Private_LCD_Pins_init();
 80002fe:	f7ff ff53 	bl	80001a8 <Private_LCD_Pins_init>
	wait_ms(15);
 8000302:	200f      	movs	r0, #15
 8000304:	f7ff ff34 	bl	8000170 <wait_ms>
	HAL_LCD_Clear_Screen();
 8000308:	f000 f8ea 	bl	80004e0 <HAL_LCD_Clear_Screen>
	#if(LCD_DATA_BITS_MODE == 8)
	HAL_LCD_Send_Command(LCD_8BIT_MODE_SELECT);
 800030c:	2038      	movs	r0, #56	; 0x38
 800030e:	f000 f80b 	bl	8000328 <HAL_LCD_Send_Command>
	#elif(LCD_DATA_BITS_MODE == 4)
	HAL_LCD_Send_Command(LCD_4BIT_MODE_SELECT_1);
	HAL_LCD_Send_Command(LCD_4BIT_MODE_SELECT_2);
	HAL_LCD_Send_Command(0x28);
	#endif
	HAL_LCD_Send_Command(LCD_ENTERY_MODE);
 8000312:	2006      	movs	r0, #6
 8000314:	f000 f808 	bl	8000328 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCD_BEGIN_AT_FIRIST_ROW);
 8000318:	2080      	movs	r0, #128	; 0x80
 800031a:	f000 f805 	bl	8000328 <HAL_LCD_Send_Command>
	HAL_LCD_Send_Command(LCDC_DISPLAY_CURSOR_ON_BLINK);
 800031e:	200f      	movs	r0, #15
 8000320:	f000 f802 	bl	8000328 <HAL_LCD_Send_Command>


}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}

08000328 <HAL_LCD_Send_Command>:
void HAL_LCD_Send_Command(uint8_t comm)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Pin_Write(LCD_COMM_PORT, LCD_COMM_RW, GPIO_PIN_LOW);
 8000332:	2200      	movs	r2, #0
 8000334:	2109      	movs	r1, #9
 8000336:	4832      	ldr	r0, [pc, #200]	; (8000400 <HAL_LCD_Send_Command+0xd8>)
 8000338:	f000 fccd 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_COMM_PORT, LCD_COMM_RS, GPIO_PIN_LOW);
 800033c:	2200      	movs	r2, #0
 800033e:	2108      	movs	r1, #8
 8000340:	482f      	ldr	r0, [pc, #188]	; (8000400 <HAL_LCD_Send_Command+0xd8>)
 8000342:	f000 fcc8 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	#if(LCD_DATA_BITS_MODE == 8)
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D0,GET_BIT(comm,0));
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	b2db      	uxtb	r3, r3
 800034e:	461a      	mov	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	482b      	ldr	r0, [pc, #172]	; (8000400 <HAL_LCD_Send_Command+0xd8>)
 8000354:	f000 fcbf 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D1,GET_BIT(comm,1));
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	105b      	asrs	r3, r3, #1
 800035c:	b2db      	uxtb	r3, r3
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	b2db      	uxtb	r3, r3
 8000364:	461a      	mov	r2, r3
 8000366:	2101      	movs	r1, #1
 8000368:	4825      	ldr	r0, [pc, #148]	; (8000400 <HAL_LCD_Send_Command+0xd8>)
 800036a:	f000 fcb4 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D2,GET_BIT(comm,2));
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	109b      	asrs	r3, r3, #2
 8000372:	b2db      	uxtb	r3, r3
 8000374:	f003 0301 	and.w	r3, r3, #1
 8000378:	b2db      	uxtb	r3, r3
 800037a:	461a      	mov	r2, r3
 800037c:	2102      	movs	r1, #2
 800037e:	4820      	ldr	r0, [pc, #128]	; (8000400 <HAL_LCD_Send_Command+0xd8>)
 8000380:	f000 fca9 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D3,GET_BIT(comm,3));
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	10db      	asrs	r3, r3, #3
 8000388:	b2db      	uxtb	r3, r3
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	b2db      	uxtb	r3, r3
 8000390:	461a      	mov	r2, r3
 8000392:	2103      	movs	r1, #3
 8000394:	481a      	ldr	r0, [pc, #104]	; (8000400 <HAL_LCD_Send_Command+0xd8>)
 8000396:	f000 fc9e 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D4,GET_BIT(comm,4));
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	111b      	asrs	r3, r3, #4
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	461a      	mov	r2, r3
 80003a8:	2104      	movs	r1, #4
 80003aa:	4815      	ldr	r0, [pc, #84]	; (8000400 <HAL_LCD_Send_Command+0xd8>)
 80003ac:	f000 fc93 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D5,GET_BIT(comm,5));
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	115b      	asrs	r3, r3, #5
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	461a      	mov	r2, r3
 80003be:	2105      	movs	r1, #5
 80003c0:	480f      	ldr	r0, [pc, #60]	; (8000400 <HAL_LCD_Send_Command+0xd8>)
 80003c2:	f000 fc88 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D6,GET_BIT(comm,6));
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	119b      	asrs	r3, r3, #6
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	f003 0301 	and.w	r3, r3, #1
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	461a      	mov	r2, r3
 80003d4:	2106      	movs	r1, #6
 80003d6:	480a      	ldr	r0, [pc, #40]	; (8000400 <HAL_LCD_Send_Command+0xd8>)
 80003d8:	f000 fc7d 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D7,GET_BIT(comm,7));
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	09db      	lsrs	r3, r3, #7
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	461a      	mov	r2, r3
 80003e4:	2107      	movs	r1, #7
 80003e6:	4806      	ldr	r0, [pc, #24]	; (8000400 <HAL_LCD_Send_Command+0xd8>)
 80003e8:	f000 fc75 	bl	8000cd6 <MCAL_GPIO_Pin_Write>

	wait_ms(1);
 80003ec:	2001      	movs	r0, #1
 80003ee:	f7ff febf 	bl	8000170 <wait_ms>
	Private_LCD_Kick();
 80003f2:	f7ff ff6b 	bl	80002cc <Private_LCD_Kick>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D2,GET_BIT(comm,2));
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D3,GET_BIT(comm,3));
	wait_ms(1)
	Private_LCD_Kick();
	#endif
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40010800 	.word	0x40010800

08000404 <HAL_LCD_Display_Char>:
void HAL_LCD_Display_Char(uint8_t data)
{	MCAL_GPIO_Pin_Write(LCD_COMM_PORT, LCD_COMM_RW, GPIO_PIN_LOW);
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
 800040e:	2200      	movs	r2, #0
 8000410:	2109      	movs	r1, #9
 8000412:	4832      	ldr	r0, [pc, #200]	; (80004dc <HAL_LCD_Display_Char+0xd8>)
 8000414:	f000 fc5f 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_COMM_PORT, LCD_COMM_RS, GPIO_PIN_HIGH);
 8000418:	2201      	movs	r2, #1
 800041a:	2108      	movs	r1, #8
 800041c:	482f      	ldr	r0, [pc, #188]	; (80004dc <HAL_LCD_Display_Char+0xd8>)
 800041e:	f000 fc5a 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	#if(LCD_DATA_BITS_MODE == 8)
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D0,GET_BIT(data,0));
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	b2db      	uxtb	r3, r3
 800042a:	461a      	mov	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	482b      	ldr	r0, [pc, #172]	; (80004dc <HAL_LCD_Display_Char+0xd8>)
 8000430:	f000 fc51 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D1,GET_BIT(data,1));
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	105b      	asrs	r3, r3, #1
 8000438:	b2db      	uxtb	r3, r3
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	2101      	movs	r1, #1
 8000444:	4825      	ldr	r0, [pc, #148]	; (80004dc <HAL_LCD_Display_Char+0xd8>)
 8000446:	f000 fc46 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D2,GET_BIT(data,2));
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	109b      	asrs	r3, r3, #2
 800044e:	b2db      	uxtb	r3, r3
 8000450:	f003 0301 	and.w	r3, r3, #1
 8000454:	b2db      	uxtb	r3, r3
 8000456:	461a      	mov	r2, r3
 8000458:	2102      	movs	r1, #2
 800045a:	4820      	ldr	r0, [pc, #128]	; (80004dc <HAL_LCD_Display_Char+0xd8>)
 800045c:	f000 fc3b 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D3,GET_BIT(data,3));
 8000460:	79fb      	ldrb	r3, [r7, #7]
 8000462:	10db      	asrs	r3, r3, #3
 8000464:	b2db      	uxtb	r3, r3
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	b2db      	uxtb	r3, r3
 800046c:	461a      	mov	r2, r3
 800046e:	2103      	movs	r1, #3
 8000470:	481a      	ldr	r0, [pc, #104]	; (80004dc <HAL_LCD_Display_Char+0xd8>)
 8000472:	f000 fc30 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D4,GET_BIT(data,4));
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	111b      	asrs	r3, r3, #4
 800047a:	b2db      	uxtb	r3, r3
 800047c:	f003 0301 	and.w	r3, r3, #1
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	2104      	movs	r1, #4
 8000486:	4815      	ldr	r0, [pc, #84]	; (80004dc <HAL_LCD_Display_Char+0xd8>)
 8000488:	f000 fc25 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D5,GET_BIT(data,5));
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	115b      	asrs	r3, r3, #5
 8000490:	b2db      	uxtb	r3, r3
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	b2db      	uxtb	r3, r3
 8000498:	461a      	mov	r2, r3
 800049a:	2105      	movs	r1, #5
 800049c:	480f      	ldr	r0, [pc, #60]	; (80004dc <HAL_LCD_Display_Char+0xd8>)
 800049e:	f000 fc1a 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D6,GET_BIT(data,6));
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	119b      	asrs	r3, r3, #6
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	2106      	movs	r1, #6
 80004b2:	480a      	ldr	r0, [pc, #40]	; (80004dc <HAL_LCD_Display_Char+0xd8>)
 80004b4:	f000 fc0f 	bl	8000cd6 <MCAL_GPIO_Pin_Write>
	MCAL_GPIO_Pin_Write(LCD_DATA_PORT,LCD_DATA_D7,GET_BIT(data,7));
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	09db      	lsrs	r3, r3, #7
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	461a      	mov	r2, r3
 80004c0:	2107      	movs	r1, #7
 80004c2:	4806      	ldr	r0, [pc, #24]	; (80004dc <HAL_LCD_Display_Char+0xd8>)
 80004c4:	f000 fc07 	bl	8000cd6 <MCAL_GPIO_Pin_Write>

	wait_ms(1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f7ff fe51 	bl	8000170 <wait_ms>
	Private_LCD_Kick();
 80004ce:	f7ff fefd 	bl	80002cc <Private_LCD_Kick>
	Private_LCD_Kick();


	#endif

}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40010800 	.word	0x40010800

080004e0 <HAL_LCD_Clear_Screen>:
void HAL_LCD_Clear_Screen(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	HAL_LCD_Send_Command(LCD_CLR_SCREEN);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f7ff ff1f 	bl	8000328 <HAL_LCD_Send_Command>
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}

080004ee <HAL_LCD_Display_String>:
void HAL_LCD_Display_String(uint8_t *ptr_str)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b084      	sub	sp, #16
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
	uint8_t itr = 0 ;
 80004f6:	2300      	movs	r3, #0
 80004f8:	73fb      	strb	r3, [r7, #15]
	while(ptr_str[itr] != '\0')
 80004fa:	e009      	b.n	8000510 <HAL_LCD_Display_String+0x22>
	{
		HAL_LCD_Display_Char(ptr_str[itr]);
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ff7d 	bl	8000404 <HAL_LCD_Display_Char>
		itr ++;
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	3301      	adds	r3, #1
 800050e:	73fb      	strb	r3, [r7, #15]
	while(ptr_str[itr] != '\0')
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1ef      	bne.n	80004fc <HAL_LCD_Display_String+0xe>
	}
}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}

08000524 <HAL_LCD_GoToXY>:
void HAL_LCD_GoToXY(uint8_t row , uint8_t col)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]
	if(row == LCD_ROW1)
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d109      	bne.n	800054e <HAL_LCD_GoToXY+0x2a>
	{
		if(col>=LCD_Column1 && col<16)
 800053a:	79bb      	ldrb	r3, [r7, #6]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d812      	bhi.n	8000566 <HAL_LCD_GoToXY+0x42>
		{
			HAL_LCD_Send_Command(0x80+col);
 8000540:	79bb      	ldrb	r3, [r7, #6]
 8000542:	3b80      	subs	r3, #128	; 0x80
 8000544:	b2db      	uxtb	r3, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff feee 	bl	8000328 <HAL_LCD_Send_Command>
		if(col>=LCD_Column1 && col<16)
		{
			HAL_LCD_Send_Command(0xC0+col);
		}
	}
}
 800054c:	e00b      	b.n	8000566 <HAL_LCD_GoToXY+0x42>
	else if(row == LCD_ROW2)
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d108      	bne.n	8000566 <HAL_LCD_GoToXY+0x42>
		if(col>=LCD_Column1 && col<16)
 8000554:	79bb      	ldrb	r3, [r7, #6]
 8000556:	2b0f      	cmp	r3, #15
 8000558:	d805      	bhi.n	8000566 <HAL_LCD_GoToXY+0x42>
			HAL_LCD_Send_Command(0xC0+col);
 800055a:	79bb      	ldrb	r3, [r7, #6]
 800055c:	3b40      	subs	r3, #64	; 0x40
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fee1 	bl	8000328 <HAL_LCD_Send_Command>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <Private_Enable_NVIC>:
//-------------------------------

//--------------------------------
//Private Functions
void Private_Enable_NVIC(uint16_t IRQ)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b0f      	cmp	r3, #15
 800057e:	d854      	bhi.n	800062a <Private_Enable_NVIC+0xba>
 8000580:	a201      	add	r2, pc, #4	; (adr r2, 8000588 <Private_Enable_NVIC+0x18>)
 8000582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000586:	bf00      	nop
 8000588:	080005c9 	.word	0x080005c9
 800058c:	080005d7 	.word	0x080005d7
 8000590:	080005e5 	.word	0x080005e5
 8000594:	080005f3 	.word	0x080005f3
 8000598:	08000601 	.word	0x08000601
 800059c:	0800060f 	.word	0x0800060f
 80005a0:	0800060f 	.word	0x0800060f
 80005a4:	0800060f 	.word	0x0800060f
 80005a8:	0800060f 	.word	0x0800060f
 80005ac:	0800060f 	.word	0x0800060f
 80005b0:	0800061d 	.word	0x0800061d
 80005b4:	0800061d 	.word	0x0800061d
 80005b8:	0800061d 	.word	0x0800061d
 80005bc:	0800061d 	.word	0x0800061d
 80005c0:	0800061d 	.word	0x0800061d
 80005c4:	0800061d 	.word	0x0800061d
			{
			case 0 :
				NVIC_IRQ6_EXTI0_EN();
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <Private_Enable_NVIC+0xc4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a19      	ldr	r2, [pc, #100]	; (8000634 <Private_Enable_NVIC+0xc4>)
 80005ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d2:	6013      	str	r3, [r2, #0]
				break;
 80005d4:	e029      	b.n	800062a <Private_Enable_NVIC+0xba>
			case 1 :
				NVIC_IRQ7_EXTI1_EN();
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <Private_Enable_NVIC+0xc4>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <Private_Enable_NVIC+0xc4>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6013      	str	r3, [r2, #0]
				break;
 80005e2:	e022      	b.n	800062a <Private_Enable_NVIC+0xba>
			case 2 :
				NVIC_IRQ8_EXTI2_EN();
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <Private_Enable_NVIC+0xc4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <Private_Enable_NVIC+0xc4>)
 80005ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ee:	6013      	str	r3, [r2, #0]
				break;
 80005f0:	e01b      	b.n	800062a <Private_Enable_NVIC+0xba>
			case 3 :
				NVIC_IRQ9_EXTI3_EN();
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <Private_Enable_NVIC+0xc4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <Private_Enable_NVIC+0xc4>)
 80005f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005fc:	6013      	str	r3, [r2, #0]
				break;
 80005fe:	e014      	b.n	800062a <Private_Enable_NVIC+0xba>
			case 4 :
				NVIC_IRQ10_EXTI4_EN();
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <Private_Enable_NVIC+0xc4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <Private_Enable_NVIC+0xc4>)
 8000606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800060a:	6013      	str	r3, [r2, #0]
				break;
 800060c:	e00d      	b.n	800062a <Private_Enable_NVIC+0xba>
			case 5 :
			case 6 :
			case 7 :
			case 8 :
			case 9 :
				NVIC_IRQ23_EXTI9_5_EN();
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <Private_Enable_NVIC+0xc4>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <Private_Enable_NVIC+0xc4>)
 8000614:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000618:	6013      	str	r3, [r2, #0]
				break;
 800061a:	e006      	b.n	800062a <Private_Enable_NVIC+0xba>
			case 11 :
			case 12 :
			case 13 :
			case 14 :
			case 15 :
				NVIC_IRQ40_EXTI15_10_EN();
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <Private_Enable_NVIC+0xc8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a05      	ldr	r2, [pc, #20]	; (8000638 <Private_Enable_NVIC+0xc8>)
 8000622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000626:	6013      	str	r3, [r2, #0]
				break;
 8000628:	bf00      	nop
			}
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	e000e100 	.word	0xe000e100
 8000638:	e000e104 	.word	0xe000e104

0800063c <Private_Disable_NVIC>:
void Private_Disable_NVIC(uint16_t IRQ)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d854      	bhi.n	80006f6 <Private_Disable_NVIC+0xba>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <Private_Disable_NVIC+0x18>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	08000695 	.word	0x08000695
 8000658:	080006a3 	.word	0x080006a3
 800065c:	080006b1 	.word	0x080006b1
 8000660:	080006bf 	.word	0x080006bf
 8000664:	080006cd 	.word	0x080006cd
 8000668:	080006db 	.word	0x080006db
 800066c:	080006db 	.word	0x080006db
 8000670:	080006db 	.word	0x080006db
 8000674:	080006db 	.word	0x080006db
 8000678:	080006db 	.word	0x080006db
 800067c:	080006e9 	.word	0x080006e9
 8000680:	080006e9 	.word	0x080006e9
 8000684:	080006e9 	.word	0x080006e9
 8000688:	080006e9 	.word	0x080006e9
 800068c:	080006e9 	.word	0x080006e9
 8000690:	080006e9 	.word	0x080006e9
			{
			case 0 :
				NVIC_IRQ6_EXTI0_DIS();
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <Private_Disable_NVIC+0xc4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a19      	ldr	r2, [pc, #100]	; (8000700 <Private_Disable_NVIC+0xc4>)
 800069a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069e:	6013      	str	r3, [r2, #0]
				break;
 80006a0:	e029      	b.n	80006f6 <Private_Disable_NVIC+0xba>
			case 1 :
				NVIC_IRQ7_EXTI1_DIS();
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <Private_Disable_NVIC+0xc4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <Private_Disable_NVIC+0xc4>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	6013      	str	r3, [r2, #0]
				break;
 80006ae:	e022      	b.n	80006f6 <Private_Disable_NVIC+0xba>
			case 2 :
				NVIC_IRQ8_EXTI2_DIS();
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <Private_Disable_NVIC+0xc4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a12      	ldr	r2, [pc, #72]	; (8000700 <Private_Disable_NVIC+0xc4>)
 80006b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ba:	6013      	str	r3, [r2, #0]
				break;
 80006bc:	e01b      	b.n	80006f6 <Private_Disable_NVIC+0xba>
			case 3 :
				NVIC_IRQ9_EXTI3_DIS();
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <Private_Disable_NVIC+0xc4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <Private_Disable_NVIC+0xc4>)
 80006c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006c8:	6013      	str	r3, [r2, #0]
				break;
 80006ca:	e014      	b.n	80006f6 <Private_Disable_NVIC+0xba>
			case 4 :
				NVIC_IRQ10_EXTI4_DIS();
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <Private_Disable_NVIC+0xc4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <Private_Disable_NVIC+0xc4>)
 80006d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006d6:	6013      	str	r3, [r2, #0]
				break;
 80006d8:	e00d      	b.n	80006f6 <Private_Disable_NVIC+0xba>
			case 5 :
			case 6 :
			case 7 :
			case 8 :
			case 9 :
				NVIC_IRQ23_EXTI9_5_DIS();
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <Private_Disable_NVIC+0xc4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <Private_Disable_NVIC+0xc4>)
 80006e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006e4:	6013      	str	r3, [r2, #0]
				break;
 80006e6:	e006      	b.n	80006f6 <Private_Disable_NVIC+0xba>
			case 11 :
			case 12 :
			case 13 :
			case 14 :
			case 15 :
				NVIC_IRQ40_EXTI15_10_DIS();
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <Private_Disable_NVIC+0xc8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a05      	ldr	r2, [pc, #20]	; (8000704 <Private_Disable_NVIC+0xc8>)
 80006ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f2:	6013      	str	r3, [r2, #0]
				break;
 80006f4:	bf00      	nop
			}
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	e000e180 	.word	0xe000e180
 8000704:	e000e184 	.word	0xe000e184

08000708 <Private_EXTI_Update>:

void Private_EXTI_Update(EXTI_Config_t *Cnfg)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	// config the GPIO ports
	GPIO_Pin_Config_t GPIO_EXTI_cnfg ;
	GPIO_EXTI_cnfg.GPIO_PIN_NUMBER = Cnfg->EXT_PIN_CONFIG.GPIO_PIN ;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7a1b      	ldrb	r3, [r3, #8]
 8000714:	b29b      	uxth	r3, r3
 8000716:	813b      	strh	r3, [r7, #8]
	GPIO_EXTI_cnfg.GPIO_PIN_MODE = AFIO_INPUT ;
 8000718:	2308      	movs	r3, #8
 800071a:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(Cnfg->EXT_PIN_CONFIG.GPIO_EXTI_PORT, &GPIO_EXTI_cnfg);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	f107 0208 	add.w	r2, r7, #8
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fa50 	bl	8000bcc <MCAL_GPIO_Init>

	uint8_t AFIO_EXTICR_Index ;
	AFIO_EXTICR_Index = (Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE) /4 ;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	089b      	lsrs	r3, r3, #2
 8000732:	b29b      	uxth	r3, r3
 8000734:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position ;
	AFIO_EXTICR_Position = ((Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE)%4)*4;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0303 	and.w	r3, r3, #3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	73bb      	strb	r3, [r7, #14]

	//1-4bits of selected EXTI must be cleared firist
	AFIO->ADIO_EXTICR[AFIO_EXTICR_Index] &= ~(0xF<<AFIO_EXTICR_Position);
 8000746:	4a63      	ldr	r2, [pc, #396]	; (80008d4 <Private_EXTI_Update+0x1cc>)
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	3302      	adds	r3, #2
 800074c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000750:	7bbb      	ldrb	r3, [r7, #14]
 8000752:	210f      	movs	r1, #15
 8000754:	fa01 f303 	lsl.w	r3, r1, r3
 8000758:	43db      	mvns	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	495d      	ldr	r1, [pc, #372]	; (80008d4 <Private_EXTI_Update+0x1cc>)
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	4002      	ands	r2, r0
 8000762:	3302      	adds	r3, #2
 8000764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//2-the value to be assigned to EXTICR according to trm
	AFIO->ADIO_EXTICR[AFIO_EXTICR_Index] |= ((AFIO_EXTICR_VALUES(Cnfg->EXT_PIN_CONFIG.GPIO_EXTI_PORT)& 0x0f)<<AFIO_EXTICR_Position);
 8000768:	4a5a      	ldr	r2, [pc, #360]	; (80008d4 <Private_EXTI_Update+0x1cc>)
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	3302      	adds	r3, #2
 800076e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	4958      	ldr	r1, [pc, #352]	; (80008d8 <Private_EXTI_Update+0x1d0>)
 8000778:	428b      	cmp	r3, r1
 800077a:	d016      	beq.n	80007aa <Private_EXTI_Update+0xa2>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	4956      	ldr	r1, [pc, #344]	; (80008dc <Private_EXTI_Update+0x1d4>)
 8000782:	428b      	cmp	r3, r1
 8000784:	d00f      	beq.n	80007a6 <Private_EXTI_Update+0x9e>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	4955      	ldr	r1, [pc, #340]	; (80008e0 <Private_EXTI_Update+0x1d8>)
 800078c:	428b      	cmp	r3, r1
 800078e:	d008      	beq.n	80007a2 <Private_EXTI_Update+0x9a>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	4953      	ldr	r1, [pc, #332]	; (80008e4 <Private_EXTI_Update+0x1dc>)
 8000796:	428b      	cmp	r3, r1
 8000798:	d101      	bne.n	800079e <Private_EXTI_Update+0x96>
 800079a:	2303      	movs	r3, #3
 800079c:	e006      	b.n	80007ac <Private_EXTI_Update+0xa4>
 800079e:	2300      	movs	r3, #0
 80007a0:	e004      	b.n	80007ac <Private_EXTI_Update+0xa4>
 80007a2:	2302      	movs	r3, #2
 80007a4:	e002      	b.n	80007ac <Private_EXTI_Update+0xa4>
 80007a6:	2301      	movs	r3, #1
 80007a8:	e000      	b.n	80007ac <Private_EXTI_Update+0xa4>
 80007aa:	2300      	movs	r3, #0
 80007ac:	7bb9      	ldrb	r1, [r7, #14]
 80007ae:	408b      	lsls	r3, r1
 80007b0:	4618      	mov	r0, r3
 80007b2:	4948      	ldr	r1, [pc, #288]	; (80008d4 <Private_EXTI_Update+0x1cc>)
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	4302      	orrs	r2, r0
 80007b8:	3302      	adds	r3, #2
 80007ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//3-Update the Trigger State
	//reset pins first
	EXTI->EXTI_RTSR *= ~(1<<Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE);
 80007be:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	8812      	ldrh	r2, [r2, #0]
 80007c6:	4611      	mov	r1, r2
 80007c8:	2201      	movs	r2, #1
 80007ca:	408a      	lsls	r2, r1
 80007cc:	43d2      	mvns	r2, r2
 80007ce:	4611      	mov	r1, r2
 80007d0:	4a45      	ldr	r2, [pc, #276]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 80007d2:	fb01 f303 	mul.w	r3, r1, r3
 80007d6:	6093      	str	r3, [r2, #8]
	EXTI->EXTI_FTSR *= ~(1<<Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE);
 80007d8:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	8812      	ldrh	r2, [r2, #0]
 80007e0:	4611      	mov	r1, r2
 80007e2:	2201      	movs	r2, #1
 80007e4:	408a      	lsls	r2, r1
 80007e6:	43d2      	mvns	r2, r2
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a3f      	ldr	r2, [pc, #252]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 80007ec:	fb01 f303 	mul.w	r3, r1, r3
 80007f0:	60d3      	str	r3, [r2, #12]
	if(Cnfg->TRIGGER_CASE == EXTI_RISING_EDGE)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7b1b      	ldrb	r3, [r3, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10b      	bne.n	8000812 <Private_EXTI_Update+0x10a>
		EXTI->EXTI_RTSR |= (1<<Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE);
 80007fa:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	8812      	ldrh	r2, [r2, #0]
 8000802:	4611      	mov	r1, r2
 8000804:	2201      	movs	r2, #1
 8000806:	408a      	lsls	r2, r1
 8000808:	4611      	mov	r1, r2
 800080a:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 800080c:	430b      	orrs	r3, r1
 800080e:	6093      	str	r3, [r2, #8]
 8000810:	e029      	b.n	8000866 <Private_EXTI_Update+0x15e>
	else if(Cnfg->TRIGGER_CASE == EXTI_FALLING_EDGE)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	7b1b      	ldrb	r3, [r3, #12]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d10b      	bne.n	8000832 <Private_EXTI_Update+0x12a>
		EXTI->EXTI_FTSR |= (1<<Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE);
 800081a:	4b33      	ldr	r3, [pc, #204]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	8812      	ldrh	r2, [r2, #0]
 8000822:	4611      	mov	r1, r2
 8000824:	2201      	movs	r2, #1
 8000826:	408a      	lsls	r2, r1
 8000828:	4611      	mov	r1, r2
 800082a:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 800082c:	430b      	orrs	r3, r1
 800082e:	60d3      	str	r3, [r2, #12]
 8000830:	e019      	b.n	8000866 <Private_EXTI_Update+0x15e>
	else if(Cnfg->TRIGGER_CASE == EXTI_RISINGANDFALLING_EDGE)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7b1b      	ldrb	r3, [r3, #12]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d115      	bne.n	8000866 <Private_EXTI_Update+0x15e>
	{
		EXTI->EXTI_RTSR |= (1<<Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE);
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	8812      	ldrh	r2, [r2, #0]
 8000842:	4611      	mov	r1, r2
 8000844:	2201      	movs	r2, #1
 8000846:	408a      	lsls	r2, r1
 8000848:	4611      	mov	r1, r2
 800084a:	4a27      	ldr	r2, [pc, #156]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 800084c:	430b      	orrs	r3, r1
 800084e:	6093      	str	r3, [r2, #8]
		EXTI->EXTI_FTSR |= (1<<Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE);
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	8812      	ldrh	r2, [r2, #0]
 8000858:	4611      	mov	r1, r2
 800085a:	2201      	movs	r2, #1
 800085c:	408a      	lsls	r2, r1
 800085e:	4611      	mov	r1, r2
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 8000862:	430b      	orrs	r3, r1
 8000864:	60d3      	str	r3, [r2, #12]
	}
	//4-Update the IRQ call back
	Global_ptr_callBack[Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE] = Cnfg->PTR_CALLBACK_FUN ;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	4a1e      	ldr	r2, [pc, #120]	; (80008ec <Private_EXTI_Update+0x1e4>)
 8000872:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//5-Enable/Disable NVIC and IRQ
	if(Cnfg->IRQ_EN == IRQ_ENABLE)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7b5b      	ldrb	r3, [r3, #13]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d110      	bne.n	80008a0 <Private_EXTI_Update+0x198>
	{
		EXTI->EXTI_IMR |= (1<<Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE);
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	8812      	ldrh	r2, [r2, #0]
 8000886:	4611      	mov	r1, r2
 8000888:	2201      	movs	r2, #1
 800088a:	408a      	lsls	r2, r1
 800088c:	4611      	mov	r1, r2
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 8000890:	430b      	orrs	r3, r1
 8000892:	6013      	str	r3, [r2, #0]
		Private_Enable_NVIC(Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fe69 	bl	8000570 <Private_Enable_NVIC>
	{
		EXTI->EXTI_IMR &= ~(1<<Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE);
		Private_Disable_NVIC(Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE);
	}

}
 800089e:	e014      	b.n	80008ca <Private_EXTI_Update+0x1c2>
	else if(Cnfg->IRQ_EN == IRQ_DISABLE)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7b5b      	ldrb	r3, [r3, #13]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d110      	bne.n	80008ca <Private_EXTI_Update+0x1c2>
		EXTI->EXTI_IMR &= ~(1<<Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE);
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	8812      	ldrh	r2, [r2, #0]
 80008b0:	4611      	mov	r1, r2
 80008b2:	2201      	movs	r2, #1
 80008b4:	408a      	lsls	r2, r1
 80008b6:	43d2      	mvns	r2, r2
 80008b8:	4611      	mov	r1, r2
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <Private_EXTI_Update+0x1e0>)
 80008bc:	400b      	ands	r3, r1
 80008be:	6013      	str	r3, [r2, #0]
		Private_Disable_NVIC(Cnfg->EXT_PIN_CONFIG.EXTI_TNP_LINE);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff feb9 	bl	800063c <Private_Disable_NVIC>
}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010000 	.word	0x40010000
 80008d8:	40010800 	.word	0x40010800
 80008dc:	40010c00 	.word	0x40010c00
 80008e0:	40011000 	.word	0x40011000
 80008e4:	40011400 	.word	0x40011400
 80008e8:	40010400 	.word	0x40010400
 80008ec:	20000020 	.word	0x20000020

080008f0 <MCAL_EXTI_Init>:

//--------------------------------
void MCAL_EXTI_Init(EXTI_Config_t *Config)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	Private_EXTI_Update(Config);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff05 	bl	8000708 <Private_EXTI_Update>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <EXTI0_IRQHandler>:
 * 			    ISR FUNCTRIONS						   *
 * 				                                       *
 *======================================================
 */
void EXTI0_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<0 ;
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <EXTI0_IRQHandler+0x1c>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <EXTI0_IRQHandler+0x1c>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[0]();
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <EXTI0_IRQHandler+0x20>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4798      	blx	r3

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40010400 	.word	0x40010400
 8000928:	20000020 	.word	0x20000020

0800092c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<1 ;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <EXTI1_IRQHandler+0x1c>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <EXTI1_IRQHandler+0x1c>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[1]();
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <EXTI1_IRQHandler+0x20>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	4798      	blx	r3
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40010400 	.word	0x40010400
 800094c:	20000020 	.word	0x20000020

08000950 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<2 ;
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <EXTI2_IRQHandler+0x1c>)
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <EXTI2_IRQHandler+0x1c>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[2]();
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <EXTI2_IRQHandler+0x20>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	4798      	blx	r3
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40010400 	.word	0x40010400
 8000970:	20000020 	.word	0x20000020

08000974 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<3 ;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <EXTI3_IRQHandler+0x1c>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <EXTI3_IRQHandler+0x1c>)
 800097e:	f043 0308 	orr.w	r3, r3, #8
 8000982:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[3]();
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <EXTI3_IRQHandler+0x20>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	4798      	blx	r3
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010400 	.word	0x40010400
 8000994:	20000020 	.word	0x20000020

08000998 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<4 ;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <EXTI4_IRQHandler+0x1c>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <EXTI4_IRQHandler+0x1c>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[4]();
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <EXTI4_IRQHandler+0x20>)
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	4798      	blx	r3
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40010400 	.word	0x40010400
 80009b8:	20000020 	.word	0x20000020

080009bc <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	if(EXTI->EXTI_PR & 1<<5){EXTI->EXTI_PR |= 1<<5 ; Global_ptr_callBack[5]();}
 80009c0:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d008      	beq.n	80009de <EXTI9_5_IRQHandler+0x22>
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	4a22      	ldr	r2, [pc, #136]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009d2:	f043 0320 	orr.w	r3, r3, #32
 80009d6:	6153      	str	r3, [r2, #20]
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <EXTI9_5_IRQHandler+0xa4>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<6){EXTI->EXTI_PR |= 1<<6 ; Global_ptr_callBack[6]();}
 80009de:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d008      	beq.n	80009fc <EXTI9_5_IRQHandler+0x40>
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <EXTI9_5_IRQHandler+0xa4>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<7){EXTI->EXTI_PR |= 1<<7 ; Global_ptr_callBack[7]();}
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d008      	beq.n	8000a1a <EXTI9_5_IRQHandler+0x5e>
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a12:	6153      	str	r3, [r2, #20]
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <EXTI9_5_IRQHandler+0xa4>)
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<8){EXTI->EXTI_PR |= 1<<8 ; Global_ptr_callBack[8]();}
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d008      	beq.n	8000a38 <EXTI9_5_IRQHandler+0x7c>
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a30:	6153      	str	r3, [r2, #20]
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <EXTI9_5_IRQHandler+0xa4>)
 8000a34:	6a1b      	ldr	r3, [r3, #32]
 8000a36:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<9){EXTI->EXTI_PR |= 1<<9 ; Global_ptr_callBack[9]();}
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d008      	beq.n	8000a56 <EXTI9_5_IRQHandler+0x9a>
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <EXTI9_5_IRQHandler+0xa0>)
 8000a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a4e:	6153      	str	r3, [r2, #20]
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <EXTI9_5_IRQHandler+0xa4>)
 8000a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a54:	4798      	blx	r3
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010400 	.word	0x40010400
 8000a60:	20000020 	.word	0x20000020

08000a64 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	if(EXTI->EXTI_PR & 1<<10){EXTI->EXTI_PR |= 1<<10 ; Global_ptr_callBack[10]();}
 8000a68:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d008      	beq.n	8000a86 <EXTI15_10_IRQHandler+0x22>
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	4a29      	ldr	r2, [pc, #164]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7e:	6153      	str	r3, [r2, #20]
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <EXTI15_10_IRQHandler+0xc0>)
 8000a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a84:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<11){EXTI->EXTI_PR |= 1<<11 ; Global_ptr_callBack[11]();}
 8000a86:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d008      	beq.n	8000aa4 <EXTI15_10_IRQHandler+0x40>
 8000a92:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000a98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <EXTI15_10_IRQHandler+0xc0>)
 8000aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa2:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<12){EXTI->EXTI_PR |= 1<<12 ; Global_ptr_callBack[12]();}
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d008      	beq.n	8000ac2 <EXTI15_10_IRQHandler+0x5e>
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	4a1a      	ldr	r2, [pc, #104]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000ab6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aba:	6153      	str	r3, [r2, #20]
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <EXTI15_10_IRQHandler+0xc0>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<13){EXTI->EXTI_PR |= 1<<13 ; Global_ptr_callBack[13]();}
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d008      	beq.n	8000ae0 <EXTI15_10_IRQHandler+0x7c>
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000ad4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <EXTI15_10_IRQHandler+0xc0>)
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ade:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<14){EXTI->EXTI_PR |= 1<<14 ; Global_ptr_callBack[14]();}
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d008      	beq.n	8000afe <EXTI15_10_IRQHandler+0x9a>
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af6:	6153      	str	r3, [r2, #20]
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <EXTI15_10_IRQHandler+0xc0>)
 8000afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000afc:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<15){EXTI->EXTI_PR |= 1<<15 ; Global_ptr_callBack[15]();}
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d008      	beq.n	8000b1c <EXTI15_10_IRQHandler+0xb8>
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <EXTI15_10_IRQHandler+0xbc>)
 8000b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b14:	6153      	str	r3, [r2, #20]
 8000b16:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <EXTI15_10_IRQHandler+0xc0>)
 8000b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1a:	4798      	blx	r3
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40010400 	.word	0x40010400
 8000b24:	20000020 	.word	0x20000020

08000b28 <Private_Get_CRLH_Position>:
 * 			Private Functions 					       *
 * 				                                       *
 *======================================================
 */
uint8_t Private_Get_CRLH_Position(uint16_t pinNumber)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	d843      	bhi.n	8000bc0 <Private_Get_CRLH_Position+0x98>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <Private_Get_CRLH_Position+0x18>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000b81 	.word	0x08000b81
 8000b44:	08000b85 	.word	0x08000b85
 8000b48:	08000b89 	.word	0x08000b89
 8000b4c:	08000b8d 	.word	0x08000b8d
 8000b50:	08000b91 	.word	0x08000b91
 8000b54:	08000b95 	.word	0x08000b95
 8000b58:	08000b99 	.word	0x08000b99
 8000b5c:	08000b9d 	.word	0x08000b9d
 8000b60:	08000ba1 	.word	0x08000ba1
 8000b64:	08000ba5 	.word	0x08000ba5
 8000b68:	08000ba9 	.word	0x08000ba9
 8000b6c:	08000bad 	.word	0x08000bad
 8000b70:	08000bb1 	.word	0x08000bb1
 8000b74:	08000bb5 	.word	0x08000bb5
 8000b78:	08000bb9 	.word	0x08000bb9
 8000b7c:	08000bbd 	.word	0x08000bbd
	{
	case GPIO_PIN0 :
		return 0	;
 8000b80:	2300      	movs	r3, #0
 8000b82:	e01e      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN1  :
		return 4	;
 8000b84:	2304      	movs	r3, #4
 8000b86:	e01c      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN2 :
		return 8	;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	e01a      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN3 :
		return 12	;
 8000b8c:	230c      	movs	r3, #12
 8000b8e:	e018      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN4 :
		return 16	;
 8000b90:	2310      	movs	r3, #16
 8000b92:	e016      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;

	case GPIO_PIN5 :
		return 20	;
 8000b94:	2314      	movs	r3, #20
 8000b96:	e014      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN6 :
		return 24	;
 8000b98:	2318      	movs	r3, #24
 8000b9a:	e012      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN7 :
		return 28	;
 8000b9c:	231c      	movs	r3, #28
 8000b9e:	e010      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN8 :
		return 0	;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e00e      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN9  :
		return 4	;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e00c      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN10 :
		return 8	;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	e00a      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN11 :
		return 12	;
 8000bac:	230c      	movs	r3, #12
 8000bae:	e008      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN12 :
		return 16	;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	e006      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;

	case GPIO_PIN13 :
		return 20	;
 8000bb4:	2314      	movs	r3, #20
 8000bb6:	e004      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN14 :
		return 24	;
 8000bb8:	2318      	movs	r3, #24
 8000bba:	e002      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN15 :
		return 28	;
 8000bbc:	231c      	movs	r3, #28
 8000bbe:	e000      	b.n	8000bc2 <Private_Get_CRLH_Position+0x9a>
		break		;
	default 		:
		return -1	;
 8000bc0:	23ff      	movs	r3, #255	; 0xff
		break		;


	}
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <MCAL_GPIO_Init>:
* @retval 		: none
* Note			: remember that according to our LQFP48 package we only have ports : A-B-C-D
*===================================================================*/

void MCAL_GPIO_Init(GPIOx_Registers_t *GPIOx ,GPIO_Pin_Config_t *Pin_Config )
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
	volatile uint32_t *configReg = NULL ;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
	uint8_t pinMode = 0 ;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]
	configReg = (Pin_Config->GPIO_PIN_NUMBER >GPIO_PIN7)? &GPIOx->GPIOx_CRH:&GPIOx->GPIOx_CRL;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	2b07      	cmp	r3, #7
 8000be4:	d902      	bls.n	8000bec <MCAL_GPIO_Init+0x20>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3304      	adds	r3, #4
 8000bea:	e000      	b.n	8000bee <MCAL_GPIO_Init+0x22>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	60bb      	str	r3, [r7, #8]
	// clear MODEx and CNFx
	*configReg &= ~(0xF<<Private_Get_CRLH_Position(Pin_Config->GPIO_PIN_NUMBER));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff97 	bl	8000b28 <Private_Get_CRLH_Position>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	230f      	movs	r3, #15
 8000c00:	4093      	lsls	r3, r2
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	401a      	ands	r2, r3
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	601a      	str	r2, [r3, #0]
	//check if any output mode selected
	if(Pin_Config->GPIO_PIN_MODE == GPIO_OUTPUT_OD ||Pin_Config->GPIO_PIN_MODE == GPIO_OUTPUT_PP || Pin_Config->GPIO_PIN_MODE == AFIO_OUTPUT_OD || Pin_Config->GPIO_PIN_MODE == AFIO_OUTPUT_PP )
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	789b      	ldrb	r3, [r3, #2]
 8000c12:	2b05      	cmp	r3, #5
 8000c14:	d00b      	beq.n	8000c2e <MCAL_GPIO_Init+0x62>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	789b      	ldrb	r3, [r3, #2]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d007      	beq.n	8000c2e <MCAL_GPIO_Init+0x62>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	789b      	ldrb	r3, [r3, #2]
 8000c22:	2b07      	cmp	r3, #7
 8000c24:	d003      	beq.n	8000c2e <MCAL_GPIO_Init+0x62>
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	789b      	ldrb	r3, [r3, #2]
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d10e      	bne.n	8000c4c <MCAL_GPIO_Init+0x80>
	{
		//define MODEx and CNFx
		pinMode = ((((Pin_Config->GPIO_PIN_MODE - 4)<<2) | (Pin_Config->GPIO_OUT_SPEED)) & 0x0F);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	789b      	ldrb	r3, [r3, #2]
 8000c32:	3b04      	subs	r3, #4
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	b25a      	sxtb	r2, r3
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	78db      	ldrb	r3, [r3, #3]
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e032      	b.n	8000cb2 <MCAL_GPIO_Init+0xe6>

	}
	//check if any input mode selected
	else
	{
		if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP || Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PDWN)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	789b      	ldrb	r3, [r3, #2]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d003      	beq.n	8000c5c <MCAL_GPIO_Init+0x90>
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	789b      	ldrb	r3, [r3, #2]
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d11c      	bne.n	8000c96 <MCAL_GPIO_Init+0xca>
		{
			pinMode =((GPIO_INPUT_PUP<<2)|0x0)&0x0F ;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	73fb      	strb	r3, [r7, #15]
			if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d10a      	bne.n	8000c7e <MCAL_GPIO_Init+0xb2>
				(GPIOx->GPIOx_ODR) |= (1<<Pin_Config->GPIO_PIN_NUMBER);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	8812      	ldrh	r2, [r2, #0]
 8000c70:	4611      	mov	r1, r2
 8000c72:	2201      	movs	r2, #1
 8000c74:	408a      	lsls	r2, r1
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	60da      	str	r2, [r3, #12]
			if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP)
 8000c7c:	e019      	b.n	8000cb2 <MCAL_GPIO_Init+0xe6>
			else
				(GPIOx->GPIOx_ODR) &= ~(1<<Pin_Config->GPIO_PIN_NUMBER);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	8812      	ldrh	r2, [r2, #0]
 8000c86:	4611      	mov	r1, r2
 8000c88:	2201      	movs	r2, #1
 8000c8a:	408a      	lsls	r2, r1
 8000c8c:	43d2      	mvns	r2, r2
 8000c8e:	401a      	ands	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	60da      	str	r2, [r3, #12]
			if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP)
 8000c94:	e00d      	b.n	8000cb2 <MCAL_GPIO_Init+0xe6>
		}
		else if(Pin_Config->GPIO_PIN_MODE == AFIO_INPUT)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	789b      	ldrb	r3, [r3, #2]
 8000c9a:	2b08      	cmp	r3, #8
 8000c9c:	d102      	bne.n	8000ca4 <MCAL_GPIO_Init+0xd8>
		{
			pinMode =((GPIO_INPUT_FLOAT<<2)|0x0)&0x0F ;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	e006      	b.n	8000cb2 <MCAL_GPIO_Init+0xe6>
		}
		else
		{
			pinMode =(((Pin_Config->GPIO_PIN_MODE)<<2)  | 0x0)&0x0F ;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	789b      	ldrb	r3, [r3, #2]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	73fb      	strb	r3, [r7, #15]

		}
	}
	(*configReg) |= (pinMode<<Private_Get_CRLH_Position(Pin_Config->GPIO_PIN_NUMBER));
 8000cb2:	7bfc      	ldrb	r4, [r7, #15]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff35 	bl	8000b28 <Private_Get_CRLH_Position>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	fa04 f203 	lsl.w	r2, r4, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	601a      	str	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd90      	pop	{r4, r7, pc}

08000cd6 <MCAL_GPIO_Pin_Write>:
* @param [out] 	: none
* @retval 		: none
* Note			: remember that according to our LQFP48 package we only have ports : A-B-C-D
*===================================================================*/
void MCAL_GPIO_Pin_Write(GPIOx_Registers_t *GPIOx , uint16_t Pin_number , uint8_t value)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	807b      	strh	r3, [r7, #2]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	707b      	strb	r3, [r7, #1]
	if(value == GPIO_PIN_HIGH)
 8000ce6:	787b      	ldrb	r3, [r7, #1]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d109      	bne.n	8000d00 <MCAL_GPIO_Pin_Write+0x2a>
	{
		GPIOx->GPIOx_ODR |= (1<<Pin_number);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	887a      	ldrh	r2, [r7, #2]
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60da      	str	r2, [r3, #12]
	}
	else
	{
		GPIOx->GPIOx_ODR &= ~(1<<Pin_number);
	}
}
 8000cfe:	e009      	b.n	8000d14 <MCAL_GPIO_Pin_Write+0x3e>
		GPIOx->GPIOx_ODR &= ~(1<<Pin_number);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	887a      	ldrh	r2, [r7, #2]
 8000d06:	2101      	movs	r1, #1
 8000d08:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0c:	43d2      	mvns	r2, r2
 8000d0e:	401a      	ands	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	60da      	str	r2, [r3, #12]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
	...

08000d20 <CLK_init>:
#include "MCAL/EXTI/EXTI.h"

uint8_t IRQ_Flag = 0 ;

void CLK_init()
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	// Enable Clock for GPIOA
	RCC_GPIOA_CLK_EN();
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <CLK_init+0x30>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a09      	ldr	r2, [pc, #36]	; (8000d50 <CLK_init+0x30>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
	// Enable Clock for GPIOB
	RCC_GPIOB_CLK_EN();
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <CLK_init+0x30>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <CLK_init+0x30>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
	//RCC ENABLE FOR EXTI
	RCC_AFIO_CLK_EN();
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <CLK_init+0x30>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a03      	ldr	r2, [pc, #12]	; (8000d50 <CLK_init+0x30>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6193      	str	r3, [r2, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000

08000d54 <wait>:
	MCAL_GPIO_Init(GPIOB, &PinCfg);


}
void wait(uint32_t time)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	uint32_t i , j;

	for( i=0 ; i<time ; i++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	e00b      	b.n	8000d7a <wait+0x26>
		for(j=0 ; j<255 ; j++);
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	e002      	b.n	8000d6e <wait+0x1a>
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	2bfe      	cmp	r3, #254	; 0xfe
 8000d72:	d9f9      	bls.n	8000d68 <wait+0x14>
	for( i=0 ; i<time ; i++)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3301      	adds	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d3ef      	bcc.n	8000d62 <wait+0xe>
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <EXTI9_CallBack>:

//call back function
void EXTI9_CallBack(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	IRQ_Flag = 1 ;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <EXTI9_CallBack+0x34>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
	HAL_LCD_GoToXY(LCD_ROW1, LCD_Column1);
 8000d96:	2100      	movs	r1, #0
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff fbc3 	bl	8000524 <HAL_LCD_GoToXY>
	HAL_LCD_Display_String("IRQ EXTI9");
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <EXTI9_CallBack+0x38>)
 8000da0:	f7ff fba5 	bl	80004ee <HAL_LCD_Display_String>
	HAL_LCD_GoToXY(LCD_ROW2, LCD_Column1);
 8000da4:	2100      	movs	r1, #0
 8000da6:	2001      	movs	r0, #1
 8000da8:	f7ff fbbc 	bl	8000524 <HAL_LCD_GoToXY>
	HAL_LCD_Display_String("is happened _|-");
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <EXTI9_CallBack+0x3c>)
 8000dae:	f7ff fb9e 	bl	80004ee <HAL_LCD_Display_String>
	wait(1000);
 8000db2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000db6:	f7ff ffcd 	bl	8000d54 <wait>

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000001c 	.word	0x2000001c
 8000dc4:	08000edc 	.word	0x08000edc
 8000dc8:	08000ee8 	.word	0x08000ee8

08000dcc <main>:
int main()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
	//ENABLE CLOCK
	CLK_init();
 8000dd2:	f7ff ffa5 	bl	8000d20 <CLK_init>
	// LCD INITIALIZATION
	HAL_LCD_Init();
 8000dd6:	f7ff fa8d 	bl	80002f4 <HAL_LCD_Init>
	//EXTI CONFIG
	EXTI_Config_t MyExti ;
	MyExti.EXT_PIN_CONFIG = EXTI9PB9 ;
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <main+0x50>)
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	ca07      	ldmia	r2, {r0, r1, r2}
 8000de0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	MyExti.TRIGGER_CASE = EXTI_RISING_EDGE ;
 8000de4:	2300      	movs	r3, #0
 8000de6:	743b      	strb	r3, [r7, #16]
	MyExti.PTR_CALLBACK_FUN = EXTI9_CallBack ;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <main+0x54>)
 8000dea:	617b      	str	r3, [r7, #20]
	MyExti.IRQ_EN = IRQ_ENABLE ;
 8000dec:	2301      	movs	r3, #1
 8000dee:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_Init(&MyExti);
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fd7c 	bl	80008f0 <MCAL_EXTI_Init>
	IRQ_Flag = 1 ;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <main+0x58>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]

	while(1)
	{

		if(IRQ_Flag)
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <main+0x58>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d004      	beq.n	8000e10 <main+0x44>
		{
			HAL_LCD_Clear_Screen();
 8000e06:	f7ff fb6b 	bl	80004e0 <HAL_LCD_Clear_Screen>
			IRQ_Flag = 0 ;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <main+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
		}

		wait(1000);
 8000e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e14:	f7ff ff9e 	bl	8000d54 <wait>
		if(IRQ_Flag)
 8000e18:	e7f1      	b.n	8000dfe <main+0x32>
 8000e1a:	bf00      	nop
 8000e1c:	08000ef8 	.word	0x08000ef8
 8000e20:	08000d8d 	.word	0x08000d8d
 8000e24:	2000001c 	.word	0x2000001c

08000e28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e56:	f000 f811 	bl	8000e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5a:	f7ff ffb7 	bl	8000dcc <main>

08000e5e <LoopForever>:

LoopForever:
    b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   r0, =_estack
 8000e60:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e6c:	08000f0c 	.word	0x08000f0c
  ldr r2, =_sbss
 8000e70:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e74:	2000005c 	.word	0x2000005c

08000e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_2_IRQHandler>
	...

08000e7c <__libc_init_array>:
 8000e7c:	b570      	push	{r4, r5, r6, lr}
 8000e7e:	2500      	movs	r5, #0
 8000e80:	4e0c      	ldr	r6, [pc, #48]	; (8000eb4 <__libc_init_array+0x38>)
 8000e82:	4c0d      	ldr	r4, [pc, #52]	; (8000eb8 <__libc_init_array+0x3c>)
 8000e84:	1ba4      	subs	r4, r4, r6
 8000e86:	10a4      	asrs	r4, r4, #2
 8000e88:	42a5      	cmp	r5, r4
 8000e8a:	d109      	bne.n	8000ea0 <__libc_init_array+0x24>
 8000e8c:	f000 f81a 	bl	8000ec4 <_init>
 8000e90:	2500      	movs	r5, #0
 8000e92:	4e0a      	ldr	r6, [pc, #40]	; (8000ebc <__libc_init_array+0x40>)
 8000e94:	4c0a      	ldr	r4, [pc, #40]	; (8000ec0 <__libc_init_array+0x44>)
 8000e96:	1ba4      	subs	r4, r4, r6
 8000e98:	10a4      	asrs	r4, r4, #2
 8000e9a:	42a5      	cmp	r5, r4
 8000e9c:	d105      	bne.n	8000eaa <__libc_init_array+0x2e>
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ea4:	4798      	blx	r3
 8000ea6:	3501      	adds	r5, #1
 8000ea8:	e7ee      	b.n	8000e88 <__libc_init_array+0xc>
 8000eaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eae:	4798      	blx	r3
 8000eb0:	3501      	adds	r5, #1
 8000eb2:	e7f2      	b.n	8000e9a <__libc_init_array+0x1e>
 8000eb4:	08000f04 	.word	0x08000f04
 8000eb8:	08000f04 	.word	0x08000f04
 8000ebc:	08000f04 	.word	0x08000f04
 8000ec0:	08000f08 	.word	0x08000f08

08000ec4 <_init>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	bf00      	nop
 8000ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eca:	bc08      	pop	{r3}
 8000ecc:	469e      	mov	lr, r3
 8000ece:	4770      	bx	lr

08000ed0 <_fini>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	bf00      	nop
 8000ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed6:	bc08      	pop	{r3}
 8000ed8:	469e      	mov	lr, r3
 8000eda:	4770      	bx	lr
