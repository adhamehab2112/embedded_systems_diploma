
stm32_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000420  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000550  08000558  00010558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000550  08000550  00010558  2**0
                  CONTENTS
  4 .ARM          00000000  08000550  08000550  00010558  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000550  08000558  00010558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000550  08000550  00010550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000554  08000554  00010554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000558  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000558  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000185c  00000000  00000000  00010581  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003d3  00000000  00000000  00011ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000044c  00000000  00000000  000121b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c0  00000000  00000000  00012600  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  000126c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000017d2  00000000  00000000  00012758  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000c9e  00000000  00000000  00013f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00006c4c  00000000  00000000  00014bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b814  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000023c  00000000  00000000  0001b890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000538 	.word	0x08000538

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000538 	.word	0x08000538

08000170 <Private_Get_CRLH_Position>:
 * 			Private Functions 					       *
 * 				                                       *
 *======================================================
 */
uint8_t Private_Get_CRLH_Position(uint16_t pinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d843      	bhi.n	8000208 <Private_Get_CRLH_Position+0x98>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <Private_Get_CRLH_Position+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001cd 	.word	0x080001cd
 8000190:	080001d1 	.word	0x080001d1
 8000194:	080001d5 	.word	0x080001d5
 8000198:	080001d9 	.word	0x080001d9
 800019c:	080001dd 	.word	0x080001dd
 80001a0:	080001e1 	.word	0x080001e1
 80001a4:	080001e5 	.word	0x080001e5
 80001a8:	080001e9 	.word	0x080001e9
 80001ac:	080001ed 	.word	0x080001ed
 80001b0:	080001f1 	.word	0x080001f1
 80001b4:	080001f5 	.word	0x080001f5
 80001b8:	080001f9 	.word	0x080001f9
 80001bc:	080001fd 	.word	0x080001fd
 80001c0:	08000201 	.word	0x08000201
 80001c4:	08000205 	.word	0x08000205
	{
	case GPIO_PIN0 :
		return 0	;
 80001c8:	2300      	movs	r3, #0
 80001ca:	e01e      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN1  :
		return 4	;
 80001cc:	2304      	movs	r3, #4
 80001ce:	e01c      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN2 :
		return 8	;
 80001d0:	2308      	movs	r3, #8
 80001d2:	e01a      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN3 :
		return 12	;
 80001d4:	230c      	movs	r3, #12
 80001d6:	e018      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN4 :
		return 16	;
 80001d8:	2310      	movs	r3, #16
 80001da:	e016      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;

	case GPIO_PIN5 :
		return 20	;
 80001dc:	2314      	movs	r3, #20
 80001de:	e014      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN6 :
		return 24	;
 80001e0:	2318      	movs	r3, #24
 80001e2:	e012      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN7 :
		return 28	;
 80001e4:	231c      	movs	r3, #28
 80001e6:	e010      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN8 :
		return 0	;
 80001e8:	2300      	movs	r3, #0
 80001ea:	e00e      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN9  :
		return 4	;
 80001ec:	2304      	movs	r3, #4
 80001ee:	e00c      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN10 :
		return 8	;
 80001f0:	2308      	movs	r3, #8
 80001f2:	e00a      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN11 :
		return 12	;
 80001f4:	230c      	movs	r3, #12
 80001f6:	e008      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN12 :
		return 16	;
 80001f8:	2310      	movs	r3, #16
 80001fa:	e006      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;

	case GPIO_PIN13 :
		return 20	;
 80001fc:	2314      	movs	r3, #20
 80001fe:	e004      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN14 :
		return 24	;
 8000200:	2318      	movs	r3, #24
 8000202:	e002      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	case GPIO_PIN15 :
		return 28	;
 8000204:	231c      	movs	r3, #28
 8000206:	e000      	b.n	800020a <Private_Get_CRLH_Position+0x9a>
		break		;
	default 		:
		return -1	;
 8000208:	23ff      	movs	r3, #255	; 0xff
		break		;


	}
}
 800020a:	4618      	mov	r0, r3
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr

08000214 <MCAL_GPIO_Init>:
* @retval 		: none
* Note			: remember that according to our LQFP48 package we only have ports : A-B-C-D
*===================================================================*/

void MCAL_GPIO_Init(GPIOx_Registers_t *GPIOx ,GPIO_Pin_Config_t *Pin_Config )
{
 8000214:	b590      	push	{r4, r7, lr}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
	volatile uint32_t *configReg = NULL ;
 800021e:	2300      	movs	r3, #0
 8000220:	60bb      	str	r3, [r7, #8]
	uint8_t pinMode = 0 ;
 8000222:	2300      	movs	r3, #0
 8000224:	73fb      	strb	r3, [r7, #15]
	configReg = (Pin_Config->GPIO_PIN_NUMBER >GPIO_PIN7)? &GPIOx->GPIOx_CRH:&GPIOx->GPIOx_CRL;
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	881b      	ldrh	r3, [r3, #0]
 800022a:	2b07      	cmp	r3, #7
 800022c:	d902      	bls.n	8000234 <MCAL_GPIO_Init+0x20>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3304      	adds	r3, #4
 8000232:	e000      	b.n	8000236 <MCAL_GPIO_Init+0x22>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	60bb      	str	r3, [r7, #8]
	// clear MODEx and CNFx
	*configReg &= ~(0xF<<Private_Get_CRLH_Position(Pin_Config->GPIO_PIN_NUMBER));
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	881b      	ldrh	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff97 	bl	8000170 <Private_Get_CRLH_Position>
 8000242:	4603      	mov	r3, r0
 8000244:	461a      	mov	r2, r3
 8000246:	230f      	movs	r3, #15
 8000248:	4093      	lsls	r3, r2
 800024a:	43da      	mvns	r2, r3
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	401a      	ands	r2, r3
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	601a      	str	r2, [r3, #0]
	//check if any output mode selected
	if(Pin_Config->GPIO_PIN_MODE == GPIO_OUTPUT_OD ||Pin_Config->GPIO_PIN_MODE == GPIO_OUTPUT_PP || Pin_Config->GPIO_PIN_MODE == AFIO_OUTPUT_OD || Pin_Config->GPIO_PIN_MODE == AFIO_OUTPUT_PP )
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	789b      	ldrb	r3, [r3, #2]
 800025a:	2b05      	cmp	r3, #5
 800025c:	d00b      	beq.n	8000276 <MCAL_GPIO_Init+0x62>
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	789b      	ldrb	r3, [r3, #2]
 8000262:	2b04      	cmp	r3, #4
 8000264:	d007      	beq.n	8000276 <MCAL_GPIO_Init+0x62>
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	789b      	ldrb	r3, [r3, #2]
 800026a:	2b07      	cmp	r3, #7
 800026c:	d003      	beq.n	8000276 <MCAL_GPIO_Init+0x62>
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	789b      	ldrb	r3, [r3, #2]
 8000272:	2b06      	cmp	r3, #6
 8000274:	d10e      	bne.n	8000294 <MCAL_GPIO_Init+0x80>
	{
		//define MODEx and CNFx
		pinMode = ((((Pin_Config->GPIO_PIN_MODE - 4)<<2) | (Pin_Config->GPIO_OUT_SPEED)) & 0x0F);
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	789b      	ldrb	r3, [r3, #2]
 800027a:	3b04      	subs	r3, #4
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	b25a      	sxtb	r2, r3
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	78db      	ldrb	r3, [r3, #3]
 8000284:	b25b      	sxtb	r3, r3
 8000286:	4313      	orrs	r3, r2
 8000288:	b25b      	sxtb	r3, r3
 800028a:	b2db      	uxtb	r3, r3
 800028c:	f003 030f 	and.w	r3, r3, #15
 8000290:	73fb      	strb	r3, [r7, #15]
 8000292:	e032      	b.n	80002fa <MCAL_GPIO_Init+0xe6>

	}
	//check if any input mode selected
	else
	{
		if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP || Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PDWN)
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	789b      	ldrb	r3, [r3, #2]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d003      	beq.n	80002a4 <MCAL_GPIO_Init+0x90>
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	789b      	ldrb	r3, [r3, #2]
 80002a0:	2b03      	cmp	r3, #3
 80002a2:	d11c      	bne.n	80002de <MCAL_GPIO_Init+0xca>
		{
			pinMode =((GPIO_INPUT_PUP<<2)|0x0)&0x0F ;
 80002a4:	2308      	movs	r3, #8
 80002a6:	73fb      	strb	r3, [r7, #15]
			if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP)
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	789b      	ldrb	r3, [r3, #2]
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	d10a      	bne.n	80002c6 <MCAL_GPIO_Init+0xb2>
				(GPIOx->GPIOx_ODR) |= (1<<Pin_Config->GPIO_PIN_NUMBER);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	683a      	ldr	r2, [r7, #0]
 80002b6:	8812      	ldrh	r2, [r2, #0]
 80002b8:	4611      	mov	r1, r2
 80002ba:	2201      	movs	r2, #1
 80002bc:	408a      	lsls	r2, r1
 80002be:	431a      	orrs	r2, r3
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	60da      	str	r2, [r3, #12]
			if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP)
 80002c4:	e019      	b.n	80002fa <MCAL_GPIO_Init+0xe6>
			else
				(GPIOx->GPIOx_ODR) &= ~(1<<Pin_Config->GPIO_PIN_NUMBER);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	683a      	ldr	r2, [r7, #0]
 80002cc:	8812      	ldrh	r2, [r2, #0]
 80002ce:	4611      	mov	r1, r2
 80002d0:	2201      	movs	r2, #1
 80002d2:	408a      	lsls	r2, r1
 80002d4:	43d2      	mvns	r2, r2
 80002d6:	401a      	ands	r2, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	60da      	str	r2, [r3, #12]
			if(Pin_Config->GPIO_PIN_MODE == GPIO_INPUT_PUP)
 80002dc:	e00d      	b.n	80002fa <MCAL_GPIO_Init+0xe6>
		}
		else if(Pin_Config->GPIO_PIN_MODE == AFIO_INPUT)
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	2b08      	cmp	r3, #8
 80002e4:	d102      	bne.n	80002ec <MCAL_GPIO_Init+0xd8>
		{
			pinMode =((GPIO_INPUT_FLOAT<<2)|0x0)&0x0F ;
 80002e6:	2304      	movs	r3, #4
 80002e8:	73fb      	strb	r3, [r7, #15]
 80002ea:	e006      	b.n	80002fa <MCAL_GPIO_Init+0xe6>
		}
		else
		{
			pinMode =(((Pin_Config->GPIO_PIN_MODE)<<2)  | 0x0)&0x0F ;
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	789b      	ldrb	r3, [r3, #2]
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	f003 030f 	and.w	r3, r3, #15
 80002f8:	73fb      	strb	r3, [r7, #15]

		}
	}
	(*configReg) |= (pinMode<<Private_Get_CRLH_Position(Pin_Config->GPIO_PIN_NUMBER));
 80002fa:	7bfc      	ldrb	r4, [r7, #15]
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff35 	bl	8000170 <Private_Get_CRLH_Position>
 8000306:	4603      	mov	r3, r0
 8000308:	fa04 f203 	lsl.w	r2, r4, r3
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	431a      	orrs	r2, r3
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	601a      	str	r2, [r3, #0]
}
 8000316:	bf00      	nop
 8000318:	3714      	adds	r7, #20
 800031a:	46bd      	mov	sp, r7
 800031c:	bd90      	pop	{r4, r7, pc}

0800031e <MCAL_GPIO_Pin_Read>:
* @param [out] 	: pin_value
* @retval 		: @ref:PIN_VALUE
* Note			: remember that according to our LQFP48 package we only have ports : A-B-C-D
*===================================================================*/
uint8_t MCAL_GPIO_Pin_Read(GPIOx_Registers_t *GPIOx , uint16_t Pin_number)
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
 8000326:	460b      	mov	r3, r1
 8000328:	807b      	strh	r3, [r7, #2]

	if(GET_BIT(GPIOx->GPIOx_IDR,Pin_number))
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	887a      	ldrh	r2, [r7, #2]
 8000330:	2101      	movs	r1, #1
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	401a      	ands	r2, r3
 8000338:	887b      	ldrh	r3, [r7, #2]
 800033a:	fa22 f303 	lsr.w	r3, r2, r3
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MCAL_GPIO_Pin_Read+0x28>
		return GPIO_PIN_HIGH ;
 8000342:	2301      	movs	r3, #1
 8000344:	e000      	b.n	8000348 <MCAL_GPIO_Pin_Read+0x2a>
	else
		return GPIO_PIN_LOW ;
 8000346:	2300      	movs	r3, #0

}
 8000348:	4618      	mov	r0, r3
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr

08000352 <MCAL_GPIO_Pin_Toggle>:
* @param [out] 	: none
* @retval 		: none
* Note			: remember that according to our LQFP48 package we only have ports : A-B-C-D
*===================================================================*/
void MCAL_GPIO_Pin_Toggle(GPIOx_Registers_t *GPIOx , uint16_t Pin_number)
{
 8000352:	b480      	push	{r7}
 8000354:	b083      	sub	sp, #12
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
 800035a:	460b      	mov	r3, r1
 800035c:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIOx_ODR ^= (1<<Pin_number);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	887a      	ldrh	r2, [r7, #2]
 8000364:	2101      	movs	r1, #1
 8000366:	fa01 f202 	lsl.w	r2, r1, r2
 800036a:	405a      	eors	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	60da      	str	r2, [r3, #12]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
	...

0800037c <CLK_init>:
 *      Author: adham
 */
#include"includes/stm32_f103_x6.h"
#include "MCAL/GPIO/GPIO.h"
void CLK_init()
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	// Enable Clock for GPIOA
	RCC_GPIOA_CLK_EN();
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <CLK_init+0x24>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <CLK_init+0x24>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
	// Enable Clock for GPIOB
	RCC_GPIOB_CLK_EN();
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <CLK_init+0x24>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a03      	ldr	r2, [pc, #12]	; (80003a0 <CLK_init+0x24>)
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	6193      	str	r3, [r2, #24]
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000

080003a4 <GPIO_init>:
void GPIO_init()
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
	GPIO_Pin_Config_t PinCfg ;

	// CONFIGURE PA1 Floating input
	PinCfg.GPIO_PIN_NUMBER = GPIO_PIN1 ;
 80003aa:	2301      	movs	r3, #1
 80003ac:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PIN_MODE = GPIO_INPUT_FLOAT ;
 80003ae:	2301      	movs	r3, #1
 80003b0:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	4813      	ldr	r0, [pc, #76]	; (8000404 <GPIO_init+0x60>)
 80003b8:	f7ff ff2c 	bl	8000214 <MCAL_GPIO_Init>

	//CONFIGURE PB1 as push-pull output
	PinCfg.GPIO_PIN_NUMBER = GPIO_PIN1 ;
 80003bc:	2301      	movs	r3, #1
 80003be:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PIN_MODE = GPIO_OUTPUT_PP ;
 80003c0:	2304      	movs	r3, #4
 80003c2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 80003c4:	2301      	movs	r3, #1
 80003c6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	4619      	mov	r1, r3
 80003cc:	480e      	ldr	r0, [pc, #56]	; (8000408 <GPIO_init+0x64>)
 80003ce:	f7ff ff21 	bl	8000214 <MCAL_GPIO_Init>


	// CONFIGURE PA13 Floating input
	PinCfg.GPIO_PIN_NUMBER = GPIO_PIN13 ;
 80003d2:	230d      	movs	r3, #13
 80003d4:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PIN_MODE = GPIO_INPUT_FLOAT ;
 80003d6:	2301      	movs	r3, #1
 80003d8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCfg);
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	4619      	mov	r1, r3
 80003de:	4809      	ldr	r0, [pc, #36]	; (8000404 <GPIO_init+0x60>)
 80003e0:	f7ff ff18 	bl	8000214 <MCAL_GPIO_Init>

	//CONFIGURE PB13 as push-pull output
	PinCfg.GPIO_PIN_NUMBER = GPIO_PIN13 ;
 80003e4:	230d      	movs	r3, #13
 80003e6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_PIN_MODE = GPIO_OUTPUT_PP ;
 80003e8:	2304      	movs	r3, #4
 80003ea:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_OUT_SPEED = GPIO_OUT_SPEED_10MHZ;
 80003ec:	2301      	movs	r3, #1
 80003ee:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	4619      	mov	r1, r3
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <GPIO_init+0x64>)
 80003f6:	f7ff ff0d 	bl	8000214 <MCAL_GPIO_Init>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40010800 	.word	0x40010800
 8000408:	40010c00 	.word	0x40010c00

0800040c <wait>:
void wait(uint32_t time)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	uint32_t i , j;

	for( i=0 ; i<time ; i++)
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	e00b      	b.n	8000432 <wait+0x26>
		for(j=0 ; j<255 ; j++);
 800041a:	2300      	movs	r3, #0
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	e002      	b.n	8000426 <wait+0x1a>
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	3301      	adds	r3, #1
 8000424:	60bb      	str	r3, [r7, #8]
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	2bfe      	cmp	r3, #254	; 0xfe
 800042a:	d9f9      	bls.n	8000420 <wait+0x14>
	for( i=0 ; i<time ; i++)
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	3301      	adds	r3, #1
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	429a      	cmp	r2, r3
 8000438:	d3ef      	bcc.n	800041a <wait+0xe>
}
 800043a:	bf00      	nop
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <main>:
int main()
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	CLK_init();
 8000448:	f7ff ff98 	bl	800037c <CLK_init>
	GPIO_init();
 800044c:	f7ff ffaa 	bl	80003a4 <GPIO_init>
	while(1)
	{
		if(MCAL_GPIO_Pin_Read(GPIOA, GPIO_PIN1) == 0)
 8000450:	2101      	movs	r1, #1
 8000452:	4810      	ldr	r0, [pc, #64]	; (8000494 <main+0x50>)
 8000454:	f7ff ff63 	bl	800031e <MCAL_GPIO_Pin_Read>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10b      	bne.n	8000476 <main+0x32>
		{
			MCAL_GPIO_Pin_Toggle(GPIOB, GPIO_PIN1);
 800045e:	2101      	movs	r1, #1
 8000460:	480d      	ldr	r0, [pc, #52]	; (8000498 <main+0x54>)
 8000462:	f7ff ff76 	bl	8000352 <MCAL_GPIO_Pin_Toggle>
			while(MCAL_GPIO_Pin_Read(GPIOA, GPIO_PIN1) == 0);
 8000466:	bf00      	nop
 8000468:	2101      	movs	r1, #1
 800046a:	480a      	ldr	r0, [pc, #40]	; (8000494 <main+0x50>)
 800046c:	f7ff ff57 	bl	800031e <MCAL_GPIO_Pin_Read>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d0f8      	beq.n	8000468 <main+0x24>
		}
		if(MCAL_GPIO_Pin_Read(GPIOA, GPIO_PIN13) == 1)
 8000476:	210d      	movs	r1, #13
 8000478:	4806      	ldr	r0, [pc, #24]	; (8000494 <main+0x50>)
 800047a:	f7ff ff50 	bl	800031e <MCAL_GPIO_Pin_Read>
 800047e:	4603      	mov	r3, r0
 8000480:	2b01      	cmp	r3, #1
 8000482:	d103      	bne.n	800048c <main+0x48>
		{
			MCAL_GPIO_Pin_Toggle(GPIOB, GPIO_PIN13);
 8000484:	210d      	movs	r1, #13
 8000486:	4804      	ldr	r0, [pc, #16]	; (8000498 <main+0x54>)
 8000488:	f7ff ff63 	bl	8000352 <MCAL_GPIO_Pin_Toggle>

		}
		wait(1);
 800048c:	2001      	movs	r0, #1
 800048e:	f7ff ffbd 	bl	800040c <wait>
		if(MCAL_GPIO_Pin_Read(GPIOA, GPIO_PIN1) == 0)
 8000492:	e7dd      	b.n	8000450 <main+0xc>
 8000494:	40010800 	.word	0x40010800
 8000498:	40010c00 	.word	0x40010c00

0800049c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a6:	490d      	ldr	r1, [pc, #52]	; (80004dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a8:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <LoopForever+0xe>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004bc:	4c0a      	ldr	r4, [pc, #40]	; (80004e8 <LoopForever+0x16>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ca:	f000 f811 	bl	80004f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ce:	f7ff ffb9 	bl	8000444 <main>

080004d2 <LoopForever>:

LoopForever:
    b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>
  ldr   r0, =_estack
 80004d4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004e0:	08000558 	.word	0x08000558
  ldr r2, =_sbss
 80004e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004e8:	2000001c 	.word	0x2000001c

080004ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC1_2_IRQHandler>
	...

080004f0 <__libc_init_array>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	2500      	movs	r5, #0
 80004f4:	4e0c      	ldr	r6, [pc, #48]	; (8000528 <__libc_init_array+0x38>)
 80004f6:	4c0d      	ldr	r4, [pc, #52]	; (800052c <__libc_init_array+0x3c>)
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	10a4      	asrs	r4, r4, #2
 80004fc:	42a5      	cmp	r5, r4
 80004fe:	d109      	bne.n	8000514 <__libc_init_array+0x24>
 8000500:	f000 f81a 	bl	8000538 <_init>
 8000504:	2500      	movs	r5, #0
 8000506:	4e0a      	ldr	r6, [pc, #40]	; (8000530 <__libc_init_array+0x40>)
 8000508:	4c0a      	ldr	r4, [pc, #40]	; (8000534 <__libc_init_array+0x44>)
 800050a:	1ba4      	subs	r4, r4, r6
 800050c:	10a4      	asrs	r4, r4, #2
 800050e:	42a5      	cmp	r5, r4
 8000510:	d105      	bne.n	800051e <__libc_init_array+0x2e>
 8000512:	bd70      	pop	{r4, r5, r6, pc}
 8000514:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000518:	4798      	blx	r3
 800051a:	3501      	adds	r5, #1
 800051c:	e7ee      	b.n	80004fc <__libc_init_array+0xc>
 800051e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000522:	4798      	blx	r3
 8000524:	3501      	adds	r5, #1
 8000526:	e7f2      	b.n	800050e <__libc_init_array+0x1e>
 8000528:	08000550 	.word	0x08000550
 800052c:	08000550 	.word	0x08000550
 8000530:	08000550 	.word	0x08000550
 8000534:	08000554 	.word	0x08000554

08000538 <_init>:
 8000538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053a:	bf00      	nop
 800053c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053e:	bc08      	pop	{r3}
 8000540:	469e      	mov	lr, r3
 8000542:	4770      	bx	lr

08000544 <_fini>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr
