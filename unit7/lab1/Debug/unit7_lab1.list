
unit7_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003cc  080003cc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003cc  080003cc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003cc  080003cc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003cc  080003cc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d0  080003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003d4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003d8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003d8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000df8  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000047b  00000000  00000000  00020e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a34  00000000  00000000  000212a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  00021cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  00021ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000056c  00000000  00000000  00022020  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000199e  00000000  00000000  0002258c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00078d7d  00000000  00000000  00023f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0009cca7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000558  00000000  00000000  0009cd24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080003b4 	.word	0x080003b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080003b4 	.word	0x080003b4

0800014c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000150:	bf00      	nop
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000158:	b480      	push	{r7}
 800015a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800015c:	e7fe      	b.n	800015c <HardFault_Handler+0x4>

0800015e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800015e:	b480      	push	{r7}
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000162:	e7fe      	b.n	8000162 <MemManage_Handler+0x4>

08000164 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000168:	e7fe      	b.n	8000168 <BusFault_Handler+0x4>

0800016a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800016a:	b480      	push	{r7}
 800016c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800016e:	e7fe      	b.n	800016e <UsageFault_Handler+0x4>

08000170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr

08000188 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000198:	f000 f8d6 	bl	8000348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800019c:	bf00      	nop
 800019e:	bd80      	pop	{r7, pc}

080001a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001ac:	480c      	ldr	r0, [pc, #48]	; (80001e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80001ae:	490d      	ldr	r1, [pc, #52]	; (80001e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80001b0:	4a0d      	ldr	r2, [pc, #52]	; (80001e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80001b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001b4:	e002      	b.n	80001bc <LoopCopyDataInit>

080001b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ba:	3304      	adds	r3, #4

080001bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001c0:	d3f9      	bcc.n	80001b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001c2:	4a0a      	ldr	r2, [pc, #40]	; (80001ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80001c4:	4c0a      	ldr	r4, [pc, #40]	; (80001f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80001c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001c8:	e001      	b.n	80001ce <LoopFillZerobss>

080001ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001cc:	3204      	adds	r2, #4

080001ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001d0:	d3fb      	bcc.n	80001ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001d2:	f7ff ffe5 	bl	80001a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001d6:	f000 f8c9 	bl	800036c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001da:	f000 f887 	bl	80002ec <main>
  bx lr
 80001de:	4770      	bx	lr
  ldr r0, =_sdata
 80001e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001e4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80001e8:	080003d4 	.word	0x080003d4
  ldr r2, =_sbss
 80001ec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80001f0:	20000024 	.word	0x20000024

080001f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001f4:	e7fe      	b.n	80001f4 <ADC1_2_IRQHandler>
	...

080001f8 <rcc_clock_init>:
// define the RCC registers
#define RCC_BASE 0x40021000
#define RCC_APB2ENR *(volatile uint32_t *)(RCC_BASE + 0x18)

void rcc_clock_init()
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= 1<<2 ; // enable IOPA
 80001fc:	4b07      	ldr	r3, [pc, #28]	; (800021c <rcc_clock_init+0x24>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a06      	ldr	r2, [pc, #24]	; (800021c <rcc_clock_init+0x24>)
 8000202:	f043 0304 	orr.w	r3, r3, #4
 8000206:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= 1<<3 ; // enable IOPB
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <rcc_clock_init+0x24>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a03      	ldr	r2, [pc, #12]	; (800021c <rcc_clock_init+0x24>)
 800020e:	f043 0308 	orr.w	r3, r3, #8
 8000212:	6013      	str	r3, [r2, #0]
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	40021018 	.word	0x40021018

08000220 <GPIO_init>:
#define GPIOB_CRH *(volatile uint32_t *)(GPIOB_BASE + 0x04)
#define GPIOB_IDR *(volatile uint32_t *)(GPIOB_BASE + 0X08)
#define GPIOB_ODR *(volatile uint32_t *)(GPIOB_BASE + 0X0C)

void GPIO_init()
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	GPIOA_CRL = 0 ;
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <GPIO_init+0x80>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
	GPIOA_CRH = 0 ;
 800022a:	4b1e      	ldr	r3, [pc, #120]	; (80002a4 <GPIO_init+0x84>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
	GPIOA_ODR = 0 ;
 8000230:	4b1d      	ldr	r3, [pc, #116]	; (80002a8 <GPIO_init+0x88>)
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
	GPIOA_CRL &= ~( 0b11 <<4 );
 8000236:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <GPIO_init+0x80>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a19      	ldr	r2, [pc, #100]	; (80002a0 <GPIO_init+0x80>)
 800023c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000240:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (0b01<<6);
 8000242:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <GPIO_init+0x80>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a16      	ldr	r2, [pc, #88]	; (80002a0 <GPIO_init+0x80>)
 8000248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800024c:	6013      	str	r3, [r2, #0]
	GPIOB_CRL |= (0b01<<4);
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <GPIO_init+0x8c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a16      	ldr	r2, [pc, #88]	; (80002ac <GPIO_init+0x8c>)
 8000254:	f043 0310 	orr.w	r3, r3, #16
 8000258:	6013      	str	r3, [r2, #0]
	GPIOB_CRL &= ~(0b11<<6);
 800025a:	4b14      	ldr	r3, [pc, #80]	; (80002ac <GPIO_init+0x8c>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a13      	ldr	r2, [pc, #76]	; (80002ac <GPIO_init+0x8c>)
 8000260:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000264:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= ~(0b11<<20);
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <GPIO_init+0x84>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <GPIO_init+0x84>)
 800026c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000270:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= (0b01<<22);
 8000272:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <GPIO_init+0x84>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <GPIO_init+0x84>)
 8000278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800027c:	6013      	str	r3, [r2, #0]
	GPIOB_CRH |= (0b11<<20);
 800027e:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <GPIO_init+0x90>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <GPIO_init+0x90>)
 8000284:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8000288:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &=  ~(0b01<<22);
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <GPIO_init+0x90>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a08      	ldr	r2, [pc, #32]	; (80002b0 <GPIO_init+0x90>)
 8000290:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000294:	6013      	str	r3, [r2, #0]
}
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800
 80002a4:	40010804 	.word	0x40010804
 80002a8:	4001080c 	.word	0x4001080c
 80002ac:	40010c00 	.word	0x40010c00
 80002b0:	40010c04 	.word	0x40010c04

080002b4 <wait_ms>:
void wait_ms(int x)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	int i , j ;
	for(i=0 ; i<x ; i++)
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	e00b      	b.n	80002da <wait_ms+0x26>
		for(j=0 ; j<255 ; j++);
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
 80002c6:	e002      	b.n	80002ce <wait_ms+0x1a>
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	2bfe      	cmp	r3, #254	; 0xfe
 80002d2:	ddf9      	ble.n	80002c8 <wait_ms+0x14>
	for(i=0 ; i<x ; i++)
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	3301      	adds	r3, #1
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	429a      	cmp	r2, r3
 80002e0:	dbef      	blt.n	80002c2 <wait_ms+0xe>
}
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <main>:

int main()
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	rcc_clock_init();
 80002f0:	f7ff ff82 	bl	80001f8 <rcc_clock_init>
	GPIO_init();
 80002f4:	f7ff ff94 	bl	8000220 <GPIO_init>

	while(1)
	{
		if((GPIOA_IDR&(1<<1))>>1 == 0)
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <main+0x54>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 0302 	and.w	r3, r3, #2
 8000300:	2b00      	cmp	r3, #0
 8000302:	d10c      	bne.n	800031e <main+0x32>
		{
			GPIOB_ODR ^= 1<<1 ;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <main+0x58>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <main+0x58>)
 800030a:	f083 0302 	eor.w	r3, r3, #2
 800030e:	6013      	str	r3, [r2, #0]
			while((GPIOA_IDR&(1<<1))>>1 == 0);
 8000310:	bf00      	nop
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <main+0x54>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f003 0302 	and.w	r3, r3, #2
 800031a:	2b00      	cmp	r3, #0
 800031c:	d0f9      	beq.n	8000312 <main+0x26>

		}
		if((GPIOA_IDR&(1<<13))>>13 == 1)
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <main+0x54>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	0b5b      	lsrs	r3, r3, #13
 8000324:	f003 0301 	and.w	r3, r3, #1
 8000328:	2b01      	cmp	r3, #1
 800032a:	d105      	bne.n	8000338 <main+0x4c>
		{

			GPIOB_ODR ^= 1<<13 ;
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <main+0x58>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a04      	ldr	r2, [pc, #16]	; (8000344 <main+0x58>)
 8000332:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000336:	6013      	str	r3, [r2, #0]
		}
		wait_ms(1);
 8000338:	2001      	movs	r0, #1
 800033a:	f7ff ffbb 	bl	80002b4 <wait_ms>
		if((GPIOA_IDR&(1<<1))>>1 == 0)
 800033e:	e7db      	b.n	80002f8 <main+0xc>
 8000340:	40010808 	.word	0x40010808
 8000344:	40010c0c 	.word	0x40010c0c

08000348 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <HAL_IncTick+0x1c>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	461a      	mov	r2, r3
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <HAL_IncTick+0x20>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4413      	add	r3, r2
 8000358:	4a03      	ldr	r2, [pc, #12]	; (8000368 <HAL_IncTick+0x20>)
 800035a:	6013      	str	r3, [r2, #0]
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	20000000 	.word	0x20000000
 8000368:	20000020 	.word	0x20000020

0800036c <__libc_init_array>:
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	2500      	movs	r5, #0
 8000370:	4e0c      	ldr	r6, [pc, #48]	; (80003a4 <__libc_init_array+0x38>)
 8000372:	4c0d      	ldr	r4, [pc, #52]	; (80003a8 <__libc_init_array+0x3c>)
 8000374:	1ba4      	subs	r4, r4, r6
 8000376:	10a4      	asrs	r4, r4, #2
 8000378:	42a5      	cmp	r5, r4
 800037a:	d109      	bne.n	8000390 <__libc_init_array+0x24>
 800037c:	f000 f81a 	bl	80003b4 <_init>
 8000380:	2500      	movs	r5, #0
 8000382:	4e0a      	ldr	r6, [pc, #40]	; (80003ac <__libc_init_array+0x40>)
 8000384:	4c0a      	ldr	r4, [pc, #40]	; (80003b0 <__libc_init_array+0x44>)
 8000386:	1ba4      	subs	r4, r4, r6
 8000388:	10a4      	asrs	r4, r4, #2
 800038a:	42a5      	cmp	r5, r4
 800038c:	d105      	bne.n	800039a <__libc_init_array+0x2e>
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000394:	4798      	blx	r3
 8000396:	3501      	adds	r5, #1
 8000398:	e7ee      	b.n	8000378 <__libc_init_array+0xc>
 800039a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800039e:	4798      	blx	r3
 80003a0:	3501      	adds	r5, #1
 80003a2:	e7f2      	b.n	800038a <__libc_init_array+0x1e>
 80003a4:	080003cc 	.word	0x080003cc
 80003a8:	080003cc 	.word	0x080003cc
 80003ac:	080003cc 	.word	0x080003cc
 80003b0:	080003d0 	.word	0x080003d0

080003b4 <_init>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr

080003c0 <_fini>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr
