
Arm_course.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000778  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080008a8  080008a8  000108a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008cc  080008cc  000108d4  2**0
                  CONTENTS
  4 .ARM          00000000  080008cc  080008cc  000108d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008cc  080008d4  000108d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008cc  080008cc  000108cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008d0  080008d0  000108d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000000  080008d4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  080008d4  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000108d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000525f  00000000  00000000  000108fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ccb  00000000  00000000  00015b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e48  00000000  00000000  00016827  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000278  00000000  00000000  00017670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000200  00000000  00000000  000178e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000040c0  00000000  00000000  00017ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000030a0  00000000  00000000  0001bba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00012608  00000000  00000000  0001ec48  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00031250  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000780  00000000  00000000  000312cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000890 	.word	0x08000890

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000890 	.word	0x08000890

08000170 <FIFO_init>:
* @Fn    		: FIFO_init
* @brief 		: This function is used Intialize the FIFO
* @param [in] 	: Pointer to element of type FIFO buffer - Pointer to Task - FIFO length
* @param [out] 	: Buffer_status
*===================================================================*/
Buffer_status FIFO_init (FIFO_Buf_t* fifo,element_type* buff , unsigned int length){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	60f8      	str	r0, [r7, #12]
 8000178:	60b9      	str	r1, [r7, #8]
 800017a:	607a      	str	r2, [r7, #4]

	if(!buff )
 800017c:	68bb      	ldr	r3, [r7, #8]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d101      	bne.n	8000186 <FIFO_init+0x16>
		return FIFO_NULL;
 8000182:	2303      	movs	r3, #3
 8000184:	e011      	b.n	80001aa <FIFO_init+0x3a>

	fifo->base = buff ;
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	68ba      	ldr	r2, [r7, #8]
 800018a:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	68da      	ldr	r2, [r3, #12]
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	68da      	ldr	r2, [r3, #12]
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	687a      	ldr	r2, [r7, #4]
 80001a0:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80001a8:	2300      	movs	r3, #0

}
 80001aa:	4618      	mov	r0, r3
 80001ac:	3714      	adds	r7, #20
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <HardFault_Handler>:
#include"CortexMx_Os_Porting.h"

/******************		Faults Exceptions Handler		***************/

void HardFault_Handler()
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	while(1);
 80001b8:	e7fe      	b.n	80001b8 <HardFault_Handler+0x4>

080001ba <MemManage_Handler>:
}
void MemManage_Handler()
{
 80001ba:	b480      	push	{r7}
 80001bc:	af00      	add	r7, sp, #0
	while(1);
 80001be:	e7fe      	b.n	80001be <MemManage_Handler+0x4>

080001c0 <BusFault_Handler>:
}
void BusFault_Handler()
{
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0
	while(1);
 80001c4:	e7fe      	b.n	80001c4 <BusFault_Handler+0x4>

080001c6 <UsageFault_Handler>:
}
void UsageFault_Handler()
{
 80001c6:	b480      	push	{r7}
 80001c8:	af00      	add	r7, sp, #0
	while(1);
 80001ca:	e7fe      	b.n	80001ca <UsageFault_Handler+0x4>

080001cc <SVC_Handler>:
	/*
	 * ---> We will make this SVC_Hnadler as assembly ==> No caller stack pushing
	 * 1- Know we were in which stack MSP/PSP -> r0
	 * 2- call a c-function that take a pointer as arg (r0)
	 * */
	__asm("TST LR,#0x4 \n\t"
 80001cc:	f01e 0f04 	tst.w	lr, #4
 80001d0:	bf0c      	ite	eq
 80001d2:	f3ef 8008 	mrseq	r0, MSP
 80001d6:	f3ef 8009 	mrsne	r0, PSP
 80001da:	f000 b877 	b.w	80002cc <OS_SVC_Services>
		  "MRSEQ r0,MSP \n\t"
		  "MRSNE r0,PSP \n\t"
		  "B OS_SVC_Services");


}
 80001de:	bf00      	nop

080001e0 <PendSV_Handler>:
/**********************		Pendsv handler	*********************/
void PendSV_Handler()
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
	/*will be used in context switching*/
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <HW_Init>:
* @brief 		: This function used to initialize the cpu core peripherals on which the Os depends
* @param [in] 	: void
* @param [out] 	: void
*===================================================================*/
void HW_Init()
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	// 8Mhz
	// 1 Count -> 0.125 us (Ticker)
	// x Count -> 1ms ---> To configure periodic interrupt
	// x = 8000 count

}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr

080001f8 <RTOS_PrivCreate_MainStack>:
* @brief 		: This function is used to Specify the os main stack in SRAM
* @param [in] 	: void
* @param [out] 	: void
*===================================================================*/
void RTOS_PrivCreate_MainStack()
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	OS_Control._S_MSP = &_estack ;
 80001fc:	4a0f      	ldr	r2, [pc, #60]	; (800023c <RTOS_PrivCreate_MainStack+0x44>)
 80001fe:	4b10      	ldr	r3, [pc, #64]	; (8000240 <RTOS_PrivCreate_MainStack+0x48>)
 8000200:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP = OS_Control._S_MSP - 3072 ; //3K Main StacK size
 8000204:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <RTOS_PrivCreate_MainStack+0x48>)
 8000206:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800020a:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800020e:	4a0c      	ldr	r2, [pc, #48]	; (8000240 <RTOS_PrivCreate_MainStack+0x48>)
 8000210:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_Control.PSP_Task_Locator = OS_Control._E_MSP - 8 ;// 8 byte Alignment
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <RTOS_PrivCreate_MainStack+0x48>)
 8000216:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800021a:	3b08      	subs	r3, #8
 800021c:	4a08      	ldr	r2, [pc, #32]	; (8000240 <RTOS_PrivCreate_MainStack+0x48>)
 800021e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	if(OS_Control._E_MSP <= _eheap )
 8000222:	4b07      	ldr	r3, [pc, #28]	; (8000240 <RTOS_PrivCreate_MainStack+0x48>)
 8000224:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <RTOS_PrivCreate_MainStack+0x4c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	429a      	cmp	r2, r3
 800022e:	d800      	bhi.n	8000232 <RTOS_PrivCreate_MainStack+0x3a>
	{
		while(1); //exceeds the stack size in SRAM
 8000230:	e7fe      	b.n	8000230 <RTOS_PrivCreate_MainStack+0x38>
	}
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	20002800 	.word	0x20002800
 8000240:	2000006c 	.word	0x2000006c
 8000244:	20000ac8 	.word	0x20000ac8

08000248 <RTOS_privIdleTask>:
* @brief 		: Rtos IDLE task that executes NOP instruction (1 clk cycle )
* @param [in] 	: void
* @param [out] 	: void
*===================================================================*/
void RTOS_privIdleTask()
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	while(1)
	{
		__asm("NOP");
 800024c:	bf00      	nop
 800024e:	e7fd      	b.n	800024c <RTOS_privIdleTask+0x4>

08000250 <RTOS_PrivCreate_Stack>:
	}
}

void RTOS_PrivCreate_Stack(Task_ref_t *Ptr_task)
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	 * r11
	 * ===========================
	 *
	 * */
	/*we have to create this context stack as dummy data for the first time*/
	Ptr_task->Current_PSP = Ptr_task->_S_PSP_Task ;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	691b      	ldr	r3, [r3, #16]
 800025c:	461a      	mov	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	619a      	str	r2, [r3, #24]
	Ptr_task->Current_PSP--;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	1f1a      	subs	r2, r3, #4
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	619a      	str	r2, [r3, #24]
	*Ptr_task->Current_PSP = 0x01000000;     //dummy xPSR value
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000274:	601a      	str	r2, [r3, #0]
	Ptr_task->Current_PSP--;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	1f1a      	subs	r2, r3, #4
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	619a      	str	r2, [r3, #24]
	*Ptr_task->Current_PSP = (unsigned int)Ptr_task->ptr_TaskEntery; // dummy pc
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	689a      	ldr	r2, [r3, #8]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	601a      	str	r2, [r3, #0]
	Ptr_task->Current_PSP--;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	1f1a      	subs	r2, r3, #4
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	619a      	str	r2, [r3, #24]
	*Ptr_task->Current_PSP = 0xFFFFFFFD; // dummy lr (exec_ret code)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f06f 0202 	mvn.w	r2, #2
 800029c:	601a      	str	r2, [r3, #0]
	for(char itr=0 ; itr<13 ; itr++)
 800029e:	2300      	movs	r3, #0
 80002a0:	73fb      	strb	r3, [r7, #15]
 80002a2:	e00b      	b.n	80002bc <RTOS_PrivCreate_Stack+0x6c>
	{
		Ptr_task->Current_PSP--;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	1f1a      	subs	r2, r3, #4
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	619a      	str	r2, [r3, #24]
		*Ptr_task->Current_PSP = 0; //GPRs dummy data
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
	for(char itr=0 ; itr<13 ; itr++)
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	3301      	adds	r3, #1
 80002ba:	73fb      	strb	r3, [r7, #15]
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	2b0c      	cmp	r3, #12
 80002c0:	d9f0      	bls.n	80002a4 <RTOS_PrivCreate_Stack+0x54>
	}

}
 80002c2:	bf00      	nop
 80002c4:	3714      	adds	r7, #20
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <OS_SVC_Services>:
* @brief 		: This function used to execute certain OS service based on SVC #Number
* @param [in] 	: Address of caller SP (MSP or PSP)
* @param [out] 	: void
*===================================================================*/
void OS_SVC_Services(int *args)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	/*args = r0 -> MSP or PSP*/
	//OS_SVC Stack end -> r0
	//OS_SVC Stack : old r0-r1-r2-r3-r12-lr-pc-xpsr
	unsigned char SVC_Number ;
	SVC_Number = *((unsigned char*)(((unsigned char*)args[6]) - 2 ));
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3318      	adds	r3, #24
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3b02      	subs	r3, #2
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	73fb      	strb	r3, [r7, #15]
	switch(SVC_Number)
 80002e0:	7bfb      	ldrb	r3, [r7, #15]
 80002e2:	2b02      	cmp	r3, #2
 80002e4:	d003      	beq.n	80002ee <OS_SVC_Services+0x22>
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	d003      	beq.n	80002f2 <OS_SVC_Services+0x26>
 80002ea:	2b01      	cmp	r3, #1
	{
				/*Os Services Selection*/

	case 1 : // Activate Task
			break;
 80002ec:	e002      	b.n	80002f4 <OS_SVC_Services+0x28>
	case 2 : // Terminate Task
			break;
 80002ee:	bf00      	nop
 80002f0:	e000      	b.n	80002f4 <OS_SVC_Services+0x28>
	case 3 :
			break;
 80002f2:	bf00      	nop
	}


}
 80002f4:	bf00      	nop
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
	...

08000300 <RTOS_Init>:
* @brief 		: This function used to initialize the OS (Update Mode - Create MStsck - Create Ready queue - Config IDLE task )
* @param [in] 	: void
* @param [out] 	: void
*===================================================================*/
Os_Error_State_t RTOS_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
		Os_Error_State_t initState = E_OK ;
 8000306:	2301      	movs	r3, #1
 8000308:	71fb      	strb	r3, [r7, #7]
		/*1-Update the OS mode*/
		OS_Control.OSMode = Os_Suspended;
 800030a:	4b16      	ldr	r3, [pc, #88]	; (8000364 <RTOS_Init+0x64>)
 800030c:	2200      	movs	r2, #0
 800030e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
		/*2-Specify the Main Stack*/
		RTOS_PrivCreate_MainStack();
 8000312:	f7ff ff71 	bl	80001f8 <RTOS_PrivCreate_MainStack>
		/*3-Create OS Ready Queue*/
		if(FIFO_init(&ReadyQueue, ReadyQueue_FIFO, 100) != FIFO_NO_ERROR)
 8000316:	2264      	movs	r2, #100	; 0x64
 8000318:	4913      	ldr	r1, [pc, #76]	; (8000368 <RTOS_Init+0x68>)
 800031a:	4814      	ldr	r0, [pc, #80]	; (800036c <RTOS_Init+0x6c>)
 800031c:	f7ff ff28 	bl	8000170 <FIFO_init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d002      	beq.n	800032c <RTOS_Init+0x2c>
		{
			initState += ReadyQueue_init_error ;
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	3302      	adds	r3, #2
 800032a:	71fb      	strb	r3, [r7, #7]
		}
		/*Create IDLE Task*/
		strcpy(RTOS_IDLE_Task.TaskName , "Idle Task");
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <RTOS_Init+0x70>)
 800032e:	4a11      	ldr	r2, [pc, #68]	; (8000374 <RTOS_Init+0x74>)
 8000330:	ca07      	ldmia	r2, {r0, r1, r2}
 8000332:	c303      	stmia	r3!, {r0, r1}
 8000334:	801a      	strh	r2, [r3, #0]
		RTOS_IDLE_Task.TaskPriority = 255 ; //Higher number lower priority
 8000336:	4b10      	ldr	r3, [pc, #64]	; (8000378 <RTOS_Init+0x78>)
 8000338:	22ff      	movs	r2, #255	; 0xff
 800033a:	711a      	strb	r2, [r3, #4]
		RTOS_IDLE_Task.ptr_TaskEntery = RTOS_privIdleTask;
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <RTOS_Init+0x78>)
 800033e:	4a0f      	ldr	r2, [pc, #60]	; (800037c <RTOS_Init+0x7c>)
 8000340:	609a      	str	r2, [r3, #8]
		RTOS_IDLE_Task.StackSize = 300 ;
 8000342:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <RTOS_Init+0x78>)
 8000344:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000348:	601a      	str	r2, [r3, #0]
		initState  += RTOS_Create_Task(&RTOS_IDLE_Task);
 800034a:	480b      	ldr	r0, [pc, #44]	; (8000378 <RTOS_Init+0x78>)
 800034c:	f000 f818 	bl	8000380 <RTOS_Create_Task>
 8000350:	4603      	mov	r3, r0
 8000352:	461a      	mov	r2, r3
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	4413      	add	r3, r2
 8000358:	71fb      	strb	r3, [r7, #7]

		return initState ;
 800035a:	79fb      	ldrb	r3, [r7, #7]
}
 800035c:	4618      	mov	r0, r3
 800035e:	3708      	adds	r7, #8
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	2000006c 	.word	0x2000006c
 8000368:	2000022c 	.word	0x2000022c
 800036c:	20000218 	.word	0x20000218
 8000370:	20000044 	.word	0x20000044
 8000374:	080008a8 	.word	0x080008a8
 8000378:	20000028 	.word	0x20000028
 800037c:	08000249 	.word	0x08000249

08000380 <RTOS_Create_Task>:
* @brief 		: This function used to create Task
* @param [in] 	: Task reference
* @param [out] 	: Os_Error_State_t
*===================================================================*/
Os_Error_State_t RTOS_Create_Task(Task_ref_t *Ptr_task)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	Os_Error_State_t error_state = E_OK ;
 8000388:	2301      	movs	r3, #1
 800038a:	73fb      	strb	r3, [r7, #15]
	/*1-create Task stack*/
	/*2-check if the task size will not exceeds the stack size*/
	/*3- Align 8 bytes*/
	Ptr_task->_S_PSP_Task = OS_Control.PSP_Task_Locator ;
 800038c:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <RTOS_Create_Task+0x74>)
 800038e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	611a      	str	r2, [r3, #16]
	Ptr_task->_E_PSP_Task = Ptr_task->_S_PSP_Task - Ptr_task->StackSize ;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	691a      	ldr	r2, [r3, #16]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	1ad2      	subs	r2, r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	615a      	str	r2, [r3, #20]
	if(Ptr_task->_E_PSP_Task <= _eheap)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	695a      	ldr	r2, [r3, #20]
 80003a8:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <RTOS_Create_Task+0x78>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d801      	bhi.n	80003b4 <RTOS_Create_Task+0x34>
	{
		error_state = StackSize_exceeds;
 80003b0:	2303      	movs	r3, #3
 80003b2:	73fb      	strb	r3, [r7, #15]
	}
	OS_Control.PSP_Task_Locator = (Ptr_task->_E_PSP_Task - 8) ;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	3b08      	subs	r3, #8
 80003ba:	4a0e      	ldr	r2, [pc, #56]	; (80003f4 <RTOS_Create_Task+0x74>)
 80003bc:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	/*Initialize the TASK frame (used in context switch and restore =>xpsr-pc-ldr-r12-r3-r2-r1-r0)*/
	/*By switching context using os we have to store/restore all registers (r5->r11) manually */
	/*each created function must have preinitialized registers values and task frame*/
	RTOS_PrivCreate_Stack(Ptr_task);
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff45 	bl	8000250 <RTOS_PrivCreate_Stack>
	/*4- Add task to scheduler table*/
	OS_Control.OsTasks[OS_Control.NoActiceTasks] = Ptr_task;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <RTOS_Create_Task+0x74>)
 80003c8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80003cc:	4909      	ldr	r1, [pc, #36]	; (80003f4 <RTOS_Create_Task+0x74>)
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoActiceTasks++;
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <RTOS_Create_Task+0x74>)
 80003d6:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80003da:	3301      	adds	r3, #1
 80003dc:	4a05      	ldr	r2, [pc, #20]	; (80003f4 <RTOS_Create_Task+0x74>)
 80003de:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
	/*5-update Task state*/
	Ptr_task->TaskState = Suspended ;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2200      	movs	r2, #0
 80003e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	return error_state;
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	3710      	adds	r7, #16
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	2000006c 	.word	0x2000006c
 80003f8:	20000ac8 	.word	0x20000ac8

080003fc <EXTI0_IRQHandler>:
 * 			    ISR FUNCTRIONS						   *
 * 				                                       *
 *======================================================
 */
void EXTI0_IRQHandler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<0 ;
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <EXTI0_IRQHandler+0x1c>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <EXTI0_IRQHandler+0x1c>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[0]();
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <EXTI0_IRQHandler+0x20>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4798      	blx	r3

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010400 	.word	0x40010400
 800041c:	200003bc 	.word	0x200003bc

08000420 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<1 ;
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <EXTI1_IRQHandler+0x1c>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <EXTI1_IRQHandler+0x1c>)
 800042a:	f043 0302 	orr.w	r3, r3, #2
 800042e:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[1]();
 8000430:	4b03      	ldr	r3, [pc, #12]	; (8000440 <EXTI1_IRQHandler+0x20>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	4798      	blx	r3
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010400 	.word	0x40010400
 8000440:	200003bc 	.word	0x200003bc

08000444 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<2 ;
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <EXTI2_IRQHandler+0x1c>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a04      	ldr	r2, [pc, #16]	; (8000460 <EXTI2_IRQHandler+0x1c>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[2]();
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <EXTI2_IRQHandler+0x20>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	4798      	blx	r3
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40010400 	.word	0x40010400
 8000464:	200003bc 	.word	0x200003bc

08000468 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<3 ;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <EXTI3_IRQHandler+0x1c>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <EXTI3_IRQHandler+0x1c>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[3]();
 8000478:	4b03      	ldr	r3, [pc, #12]	; (8000488 <EXTI3_IRQHandler+0x20>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	4798      	blx	r3
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40010400 	.word	0x40010400
 8000488:	200003bc 	.word	0x200003bc

0800048c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	// CLear by write 1 into pending register
	EXTI->EXTI_PR |= 1<<4 ;
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <EXTI4_IRQHandler+0x1c>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <EXTI4_IRQHandler+0x1c>)
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	6153      	str	r3, [r2, #20]
	// CALLBACK IRQ_CALL
	Global_ptr_callBack[4]();
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <EXTI4_IRQHandler+0x20>)
 800049e:	691b      	ldr	r3, [r3, #16]
 80004a0:	4798      	blx	r3
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010400 	.word	0x40010400
 80004ac:	200003bc 	.word	0x200003bc

080004b0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	if(EXTI->EXTI_PR & 1<<5){EXTI->EXTI_PR |= 1<<5 ; Global_ptr_callBack[5]();}
 80004b4:	4b26      	ldr	r3, [pc, #152]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f003 0320 	and.w	r3, r3, #32
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d008      	beq.n	80004d2 <EXTI9_5_IRQHandler+0x22>
 80004c0:	4b23      	ldr	r3, [pc, #140]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a22      	ldr	r2, [pc, #136]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6153      	str	r3, [r2, #20]
 80004cc:	4b21      	ldr	r3, [pc, #132]	; (8000554 <EXTI9_5_IRQHandler+0xa4>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<6){EXTI->EXTI_PR |= 1<<6 ; Global_ptr_callBack[6]();}
 80004d2:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d008      	beq.n	80004f0 <EXTI9_5_IRQHandler+0x40>
 80004de:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a1b      	ldr	r2, [pc, #108]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 80004e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <EXTI9_5_IRQHandler+0xa4>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<7){EXTI->EXTI_PR |= 1<<7 ; Global_ptr_callBack[7]();}
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d008      	beq.n	800050e <EXTI9_5_IRQHandler+0x5e>
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 8000502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000506:	6153      	str	r3, [r2, #20]
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <EXTI9_5_IRQHandler+0xa4>)
 800050a:	69db      	ldr	r3, [r3, #28]
 800050c:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<8){EXTI->EXTI_PR |= 1<<8 ; Global_ptr_callBack[8]();}
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000516:	2b00      	cmp	r3, #0
 8000518:	d008      	beq.n	800052c <EXTI9_5_IRQHandler+0x7c>
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 8000520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <EXTI9_5_IRQHandler+0xa4>)
 8000528:	6a1b      	ldr	r3, [r3, #32]
 800052a:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<9){EXTI->EXTI_PR |= 1<<9 ; Global_ptr_callBack[9]();}
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000534:	2b00      	cmp	r3, #0
 8000536:	d008      	beq.n	800054a <EXTI9_5_IRQHandler+0x9a>
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <EXTI9_5_IRQHandler+0xa0>)
 800053e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000542:	6153      	str	r3, [r2, #20]
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <EXTI9_5_IRQHandler+0xa4>)
 8000546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000548:	4798      	blx	r3
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40010400 	.word	0x40010400
 8000554:	200003bc 	.word	0x200003bc

08000558 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	if(EXTI->EXTI_PR & 1<<10){EXTI->EXTI_PR |= 1<<10 ; Global_ptr_callBack[10]();}
 800055c:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000564:	2b00      	cmp	r3, #0
 8000566:	d008      	beq.n	800057a <EXTI15_10_IRQHandler+0x22>
 8000568:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a29      	ldr	r2, [pc, #164]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 800056e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000572:	6153      	str	r3, [r2, #20]
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <EXTI15_10_IRQHandler+0xc0>)
 8000576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000578:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<11){EXTI->EXTI_PR |= 1<<11 ; Global_ptr_callBack[11]();}
 800057a:	4b26      	ldr	r3, [pc, #152]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000582:	2b00      	cmp	r3, #0
 8000584:	d008      	beq.n	8000598 <EXTI15_10_IRQHandler+0x40>
 8000586:	4b23      	ldr	r3, [pc, #140]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a22      	ldr	r2, [pc, #136]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 800058c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <EXTI15_10_IRQHandler+0xc0>)
 8000594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000596:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<12){EXTI->EXTI_PR |= 1<<12 ; Global_ptr_callBack[12]();}
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d008      	beq.n	80005b6 <EXTI15_10_IRQHandler+0x5e>
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a1a      	ldr	r2, [pc, #104]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 80005aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005ae:	6153      	str	r3, [r2, #20]
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <EXTI15_10_IRQHandler+0xc0>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b4:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<13){EXTI->EXTI_PR |= 1<<13 ; Global_ptr_callBack[13]();}
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d008      	beq.n	80005d4 <EXTI15_10_IRQHandler+0x7c>
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 80005c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <EXTI15_10_IRQHandler+0xc0>)
 80005d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d2:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<14){EXTI->EXTI_PR |= 1<<14 ; Global_ptr_callBack[14]();}
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d008      	beq.n	80005f2 <EXTI15_10_IRQHandler+0x9a>
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <EXTI15_10_IRQHandler+0xc0>)
 80005ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005f0:	4798      	blx	r3
	if(EXTI->EXTI_PR & 1<<15){EXTI->EXTI_PR |= 1<<15 ; Global_ptr_callBack[15]();}
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <EXTI15_10_IRQHandler+0xb8>
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a04      	ldr	r2, [pc, #16]	; (8000614 <EXTI15_10_IRQHandler+0xbc>)
 8000604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b03      	ldr	r3, [pc, #12]	; (8000618 <EXTI15_10_IRQHandler+0xc0>)
 800060c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800060e:	4798      	blx	r3
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40010400 	.word	0x40010400
 8000618:	200003bc 	.word	0x200003bc

0800061c <SPI1_IRQHandler>:
//================================================

//===============================================
//=================ISRQ Handler===================
void SPI1_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC IRQSrc ;
	IRQSrc.TXE = ((SPI1->SPI_SR & 1<<1)>>1);
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <SPI1_IRQHandler+0x54>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	085b      	lsrs	r3, r3, #1
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	793b      	ldrb	r3, [r7, #4]
 8000630:	f362 0300 	bfi	r3, r2, #0, #1
 8000634:	713b      	strb	r3, [r7, #4]
	IRQSrc.RXNE = ((SPI1->SPI_SR) & 1<<0);
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <SPI1_IRQHandler+0x54>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	793b      	ldrb	r3, [r7, #4]
 8000642:	f362 0341 	bfi	r3, r2, #1, #1
 8000646:	713b      	strb	r3, [r7, #4]
	IRQSrc.ERR = ((SPI1->SPI_SR & 1<<4)>>4);
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <SPI1_IRQHandler+0x54>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	091b      	lsrs	r3, r3, #4
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	b2da      	uxtb	r2, r3
 8000654:	793b      	ldrb	r3, [r7, #4]
 8000656:	f362 0382 	bfi	r3, r2, #2, #1
 800065a:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_INDEX]->Call_Back_Ptr(IRQSrc);
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <SPI1_IRQHandler+0x58>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	7938      	ldrb	r0, [r7, #4]
 8000664:	4798      	blx	r3

}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40013000 	.word	0x40013000
 8000674:	2000001c 	.word	0x2000001c

08000678 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC IRQSrc ;
	IRQSrc.TXE = ((SPI2->SPI_SR & 1<<1)>>1);
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <SPI2_IRQHandler+0x54>)
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	085b      	lsrs	r3, r3, #1
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	793b      	ldrb	r3, [r7, #4]
 800068c:	f362 0300 	bfi	r3, r2, #0, #1
 8000690:	713b      	strb	r3, [r7, #4]
	IRQSrc.RXNE = ((SPI2->SPI_SR) & 1<<0);
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <SPI2_IRQHandler+0x54>)
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	b2da      	uxtb	r2, r3
 800069c:	793b      	ldrb	r3, [r7, #4]
 800069e:	f362 0341 	bfi	r3, r2, #1, #1
 80006a2:	713b      	strb	r3, [r7, #4]
	IRQSrc.ERR = ((SPI2->SPI_SR & 1<<4)>>4);
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <SPI2_IRQHandler+0x54>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	091b      	lsrs	r3, r3, #4
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	793b      	ldrb	r3, [r7, #4]
 80006b2:	f362 0382 	bfi	r3, r2, #2, #1
 80006b6:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->Call_Back_Ptr(IRQSrc);
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <SPI2_IRQHandler+0x58>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	7938      	ldrb	r0, [r7, #4]
 80006c0:	4798      	blx	r3

}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40003800 	.word	0x40003800
 80006d0:	2000001c 	.word	0x2000001c

080006d4 <USART1_IRQHandler>:

//=================================================================
//					      USART ISR
//=================================================================
void USART1_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	Gl_Config->call_back_ptr();
 80006d8:	4b02      	ldr	r3, [pc, #8]	; (80006e4 <USART1_IRQHandler+0x10>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	691b      	ldr	r3, [r3, #16]
 80006de:	4798      	blx	r3
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000024 	.word	0x20000024

080006e8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	Gl_Config->call_back_ptr();
 80006ec:	4b02      	ldr	r3, [pc, #8]	; (80006f8 <USART2_IRQHandler+0x10>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	4798      	blx	r3
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000024 	.word	0x20000024

080006fc <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	Gl_Config->call_back_ptr();
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <USART3_IRQHandler+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	4798      	blx	r3
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000024 	.word	0x20000024

08000710 <task1_fun>:
		for(j=0 ; j<255 ; j++);
}

Task_ref_t Task1 , Task2 , Task3 ;
void task1_fun()
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
	while(1);
 8000714:	e7fe      	b.n	8000714 <task1_fun+0x4>

08000716 <task2_fun>:
}
void task2_fun()
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
	while(1);
 800071a:	e7fe      	b.n	800071a <task2_fun+0x4>

0800071c <task3_fun>:
}
void task3_fun()
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	while(1);
 8000720:	e7fe      	b.n	8000720 <task3_fun+0x4>
	...

08000724 <main>:
}


int main()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	// HW_Init (CLK-RCC)
	HW_Init();
 8000728:	f7ff fd60 	bl	80001ec <HW_Init>
	// RTOS Initialization
	if(RTOS_Init() == E_NOK)
 800072c:	f7ff fde8 	bl	8000300 <RTOS_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d100      	bne.n	8000738 <main+0x14>
	{
		while(1);
 8000736:	e7fe      	b.n	8000736 <main+0x12>
	}
	Task1.StackSize = 1024 ;
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <main+0xa0>)
 800073a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800073e:	601a      	str	r2, [r3, #0]
	Task1.ptr_TaskEntery = task1_fun ;
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <main+0xa0>)
 8000742:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <main+0xa4>)
 8000744:	609a      	str	r2, [r3, #8]
	Task1.TaskPriority = 3 ;
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <main+0xa0>)
 8000748:	2203      	movs	r2, #3
 800074a:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName,"task_1");
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <main+0xa8>)
 800074e:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <main+0xac>)
 8000750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000754:	6018      	str	r0, [r3, #0]
 8000756:	3304      	adds	r3, #4
 8000758:	8019      	strh	r1, [r3, #0]
 800075a:	3302      	adds	r3, #2
 800075c:	0c0a      	lsrs	r2, r1, #16
 800075e:	701a      	strb	r2, [r3, #0]
	Task2.StackSize = 1024 ;
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <main+0xb0>)
 8000762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000766:	601a      	str	r2, [r3, #0]
	Task2.ptr_TaskEntery = task2_fun ;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <main+0xb0>)
 800076a:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <main+0xb4>)
 800076c:	609a      	str	r2, [r3, #8]
	Task2.TaskPriority = 3 ;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <main+0xb0>)
 8000770:	2203      	movs	r2, #3
 8000772:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName,"task_2");
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <main+0xb8>)
 8000776:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <main+0xbc>)
 8000778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077c:	6018      	str	r0, [r3, #0]
 800077e:	3304      	adds	r3, #4
 8000780:	8019      	strh	r1, [r3, #0]
 8000782:	3302      	adds	r3, #2
 8000784:	0c0a      	lsrs	r2, r1, #16
 8000786:	701a      	strb	r2, [r3, #0]
	Task3.StackSize = 1024 ;
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <main+0xc0>)
 800078a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800078e:	601a      	str	r2, [r3, #0]
	Task3.ptr_TaskEntery = task3_fun ;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <main+0xc0>)
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <main+0xc4>)
 8000794:	609a      	str	r2, [r3, #8]
	Task3.TaskPriority = 3 ;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <main+0xc0>)
 8000798:	2203      	movs	r2, #3
 800079a:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName,"task_3");
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <main+0xc8>)
 800079e:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <main+0xcc>)
 80007a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a4:	6018      	str	r0, [r3, #0]
 80007a6:	3304      	adds	r3, #4
 80007a8:	8019      	strh	r1, [r3, #0]
 80007aa:	3302      	adds	r3, #2
 80007ac:	0c0a      	lsrs	r2, r1, #16
 80007ae:	701a      	strb	r2, [r3, #0]
	RTOS_Create_Task(&Task1);
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <main+0xa0>)
 80007b2:	f7ff fde5 	bl	8000380 <RTOS_Create_Task>
	RTOS_Create_Task(&Task2);
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <main+0xb0>)
 80007b8:	f7ff fde2 	bl	8000380 <RTOS_Create_Task>
	RTOS_Create_Task(&Task3);
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <main+0xc0>)
 80007be:	f7ff fddf 	bl	8000380 <RTOS_Create_Task>
	while(1)
 80007c2:	e7fe      	b.n	80007c2 <main+0x9e>
 80007c4:	200003f8 	.word	0x200003f8
 80007c8:	08000711 	.word	0x08000711
 80007cc:	20000414 	.word	0x20000414
 80007d0:	080008b4 	.word	0x080008b4
 80007d4:	20000480 	.word	0x20000480
 80007d8:	08000717 	.word	0x08000717
 80007dc:	2000049c 	.word	0x2000049c
 80007e0:	080008bc 	.word	0x080008bc
 80007e4:	2000043c 	.word	0x2000043c
 80007e8:	0800071d 	.word	0x0800071d
 80007ec:	20000458 	.word	0x20000458
 80007f0:	080008c4 	.word	0x080008c4

080007f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fe:	490d      	ldr	r1, [pc, #52]	; (8000834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <LoopForever+0xe>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000814:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <LoopForever+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000822:	f000 f811 	bl	8000848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff ff7d 	bl	8000724 <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   r0, =_estack
 800082c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000838:	080008d4 	.word	0x080008d4
  ldr r2, =_sbss
 800083c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000840:	200004c4 	.word	0x200004c4

08000844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_2_IRQHandler>
	...

08000848 <__libc_init_array>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	2500      	movs	r5, #0
 800084c:	4e0c      	ldr	r6, [pc, #48]	; (8000880 <__libc_init_array+0x38>)
 800084e:	4c0d      	ldr	r4, [pc, #52]	; (8000884 <__libc_init_array+0x3c>)
 8000850:	1ba4      	subs	r4, r4, r6
 8000852:	10a4      	asrs	r4, r4, #2
 8000854:	42a5      	cmp	r5, r4
 8000856:	d109      	bne.n	800086c <__libc_init_array+0x24>
 8000858:	f000 f81a 	bl	8000890 <_init>
 800085c:	2500      	movs	r5, #0
 800085e:	4e0a      	ldr	r6, [pc, #40]	; (8000888 <__libc_init_array+0x40>)
 8000860:	4c0a      	ldr	r4, [pc, #40]	; (800088c <__libc_init_array+0x44>)
 8000862:	1ba4      	subs	r4, r4, r6
 8000864:	10a4      	asrs	r4, r4, #2
 8000866:	42a5      	cmp	r5, r4
 8000868:	d105      	bne.n	8000876 <__libc_init_array+0x2e>
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000870:	4798      	blx	r3
 8000872:	3501      	adds	r5, #1
 8000874:	e7ee      	b.n	8000854 <__libc_init_array+0xc>
 8000876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800087a:	4798      	blx	r3
 800087c:	3501      	adds	r5, #1
 800087e:	e7f2      	b.n	8000866 <__libc_init_array+0x1e>
 8000880:	080008cc 	.word	0x080008cc
 8000884:	080008cc 	.word	0x080008cc
 8000888:	080008cc 	.word	0x080008cc
 800088c:	080008d0 	.word	0x080008d0

08000890 <_init>:
 8000890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000892:	bf00      	nop
 8000894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000896:	bc08      	pop	{r3}
 8000898:	469e      	mov	lr, r3
 800089a:	4770      	bx	lr

0800089c <_fini>:
 800089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089e:	bf00      	nop
 80008a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008a2:	bc08      	pop	{r3}
 80008a4:	469e      	mov	lr, r3
 80008a6:	4770      	bx	lr
